[{"id":"e53aef447e609f6346cd88030af73ac8","title":"JDK8有哪些新特性？","content":"JDK8较为重要和平日里经常被问的特性如下：\n1)用元空间替代了永久代因为JDK8要把JRockit虚拟机和Hotspot虚拟机融合，而JRockit没有永久代，所以把Hotspot永久代给去了（本质也是永久代回收效率太低)\n2)引入了Lambda表达式Lambda表达式是Java8中引入的一个重要特性，它允许我们以更简洁和灵活的方式编写代码。Lambda表达式可以看作是匿名函数，它没有方法名，但可以包含参数和函数体。Lambda表达式可以用于简化代码，提高代码的可读性和可维护性。Lambda表达式的基本语法如下：\n123(parameters) -&gt; expression或(parameters) -&gt; &#123; statements; &#125;\n其中，parameters是参数列表，expression是函数体，statements是函数体的多条语句。Lambda表达式可以用于替换匿名内部类，使代码更加简洁和易读。例如，我们可以使用Lambda表达式来简化以下代码：\n1234567List&lt;String&gt; list = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);Collections.sort(list, new Comparator&lt;String&gt;() &#123;    @Override    public int compare(String s1, String s2) &#123;        return s1.compareTo(s2);    &#125;&#125;);\n使用Lambda表达式可以简化为：\n12List&lt;String&gt; list = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);Collections.sort(list, (s1, s2) -&gt; s1.compareTo(s2));\nLambda表达式还可以用于简化其他场景，例如线程的创建、集合的遍历等。\n3)引入了日期类、接口默认方法、静态方法Java8引入了新的日期和时间APl(位于java.time包中)，它们更加简洁和易于使用，解决了旧版日期时间AP!的许多问题。例如DateCalendar都是可变类且线程不安全。而新的日期类都是不可变的，一旦创建就不能修改，这样可以避免意外的修改，提升代码的安全性和可维护性。\n123LocalDate date =LocalDate.now();LocalTime time =LocalTime.now();LocalDateTime dateTime =LocalDateTime.now()\nDate本身不包含时区信息，必须使用Calendar类来处理时区，但使用起来非常复杂且容易出错。新API提供了专门的时区类（如ZonedDateTime,OffsetDateTimeZoneId等)，简化了时区处理，并且这些类的方法更加直观和易用。\n接口默认方法、静态默认方法允许在接口中定义方法的默认实现，这样接口的实现类不需要再实现这些方法。之所以提供静态方法，是为了将相关的方法内聚在接口中，而不必创建新的对象。\n4)新增Stream流式接口Stream API是Java8中引入的一个新特性，它提供了一种新的方式来处理数据集合。Stream API允许我们以声明式的方式处理数据，避免了传统的循环和条件语句，使代码更加简洁和易读。Stream API的基本语法如下：\n1Stream&lt;T&gt; stream = collection.stream();\n其中，collection是一个数据集合，可以是List、Set、Map等。stream是一个Stream对象，它表示一个数据流，可以通过一系列的操作来处理数据。Stream API提供了一系列的操作，包括过滤、映射、排序、聚合等。这些操作可以链式调用，使代码更加简洁和易读。例如，我们可以使用Stream API来过滤一个List中的偶数，并计算它们的和：\n123456List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6);int sum = list.stream()    .filter(n -&gt; n % 2 == 0)    .mapToInt(Integer::intValue)    .sum();System.out.println(sum); // 输出：12\n在上面的代码中，我们首先将List转换为一个Stream对象，然后使用filter操作过滤出偶数，再使用mapToInt操作将Stream中的元素转换为int类型，最后使用sum操作计算它们的和。整个操作链式调用，使代码更加简洁和易读。Stream API还提供了一些其他的操作，例如reduce、collect、forEach等，可以满足各种数据处理的需求。通过使用Stream API，我们可以更加高效地处理数据集合，使代码更加简洁和易读。\n5)引入Optional类Optional是Java8引入的一个容器类，用于表示可能为空的值。它通过提供更为清晰的AP!,来减少程序中出现nu11的情况，避免NullPointerException(空指针异常)的发生。Optional可以包含一个值，也可以为空，从而表示“值存在”或“值不存在”这两种状态。作用：\n\n减少NullPointerException:通过Optional提供的操作方法，避免 直接使用 null进行空值检查，从而降低空指针异常的风险。\n提高代码可读性：Optional 提供了一套简洁的API,例如isPresent() ifPresent()和orElse()，可以让代码更具表达性，清晰地展示处理空值的逻辑1234Optional&lt;String&gt; optional = Optional.of(&quot;Hello&quot;);if (optional.isPresent()) &#123;    System.out.println(optional.get());&#125;\n\n6)新增了CompletableFuture、StampedLock等并发实现类。CompletableFuture提供了一个新的异步编程模型，简化了异步任务的编写和管理。StampedLock是一个新的读写锁实现，它提供了一种新的方式来处理读写锁，避免了复杂的锁机制和锁竞争。\n如果你对HashMap、ConcurrentHashMap面试题有准备的话，这时候也可以抛出来，引导面试官来询问。比如：Java8修改了HashMap和ConcurrentHashMap的实现。\n\n","slug":"八股","date":"2024-11-13T04:14:48.000Z","categories_index":"","tags_index":"八股","author_index":"Crush"},{"id":"76e26cf6d70a50daf8e75fb7d566964d","title":"面试官到底喜欢什么样的人？","content":"面试官到底喜欢什么样的人？在统一批次的面试中，可能就有好几百号人，无可否认的是，我们都喜欢优秀的人，都想和优秀的人共事，那怎么表现出我们的优秀呢？\n面试官喜欢爱学习、爱动脑、有技术广度和深度并且有实际经验的人。\n面试时间一般30分钟左右，我们必须通过自己的话术，去展现【爱学习、爱动脑、技术广度和深度以及实际经验】给他&#x2F;她看。\n建立正确的面试心态在这种大环境下，面试时间会被拉的很长，一面、二面、三面……面试的环节越多，那么你挂掉的概率也就越大，但没办法，就是这么卷。。。\n我们不需要唬住所有的面试官，因为在面试的过程中，面试官是用他最熟悉的东西去问题，有可能他熟悉的地方你并不是特别的熟悉，所以可能就会出现答得不好或者答不上来的情况，这很正常。。。\n我们做的事情，就是拿下我们能拿下的面试官。其实大部分面试官都是一边工作一边去面试的，所以八股的知识也就一般。比如说大厂的面试官，可能就会对原理性的东西进行深层次的拷打，如果你还只能回答出一些表面性的东西或者说大家都会说的一些东西，那么就不能体现出你的优势，面试挂掉的概率极大。当然，这些面试官也不是我们的菜。\n这小节最重要的一点就是：你对面试准备有多充分，就决定了你能找到什么样的工作！\n（不会说你随便糊弄了一下就能拿到一份很好的offer，而别人准备了大半年却颗粒无收，匹配机制嘛，找到符合自己目前口味的面试官，才是重点）\n如何把面试官拉倒坑里？上文也叙述过，其实大部分面试官的水平也一般，所以他其实也不知道自己该问些什么东西，如果你也没有对他进行相关的引导的话，他不就只能随便问了嘛。\n如何引导面试官？原理其实也比较简单：\n\n自我介绍阶段，突出描述自己擅长的部分\n回答问题的时候，为下一个问题做铺垫\n\n对于自我介绍，下文会进行详细的叙述。\n我们来说一下第二点，往往面试官问的问题都是层层递进的，会从你对某个问题的回答中捕风捉影，想好下一个要问你的问题。那是不是可以提前预判呢？把面试官引导上你准备好的问题链中去。\n还要一个比较重要的点就是拖延时间，或者说扩展描述，做到问一答三，因为你能回答出来的东西，那肯定是你提前准备好的，你给他暴露的信息越多，他问的点也就越多。但是，短短的半小时，他不可能什么都去问你，一定是从你的问答中挑他感兴趣的点，继续追问。你给他的选项，一定是你准备过的，每个点都这样的去扩展描述，一方面体现出你是一个【爱学习、爱动脑、有技术广度和深度并且有实际经验的人】，另一方面这样也将面试时间的主导权交到了自己的手上，你一直再说，面试官一直在听，问个两三个问题后，他可能就不会在问其他的了。\n（面试也要占用面试官的时间，谁不想休息啊，而且人家也有自己的事情要去做）\n面试的本质是什么？问题：面试是介绍你自己还是你的项目？\n答案：一定是介绍你自己。本质上来说，大多数的项目都是CRUD，没有什么特别的亮点。那和面试官对话的时候，就不要关注项目本身了，而是要去关注某个功能的实现，简单描述一下项目中的功能是怎么去实现的，然后重点叙述一下该方式存在什么样的不足，你会怎么去解决这个问题？\n场景：\n假设你现在的项目就是一个纯粹的后端管理系统，登录方式采用的是JavaWeb的Cookie + Session。\n针对该功能的叙述：\n由于我这个项目其实是一个学习项目，算不上真正意义上的生产级别的项目，所以登录功能只是采用了JavaWeb的 Cookie + Session 这样一种简单的形式。但是呢，这样做存在一些问题。比如说在分布式的环境中，多个JVM实例无法共享 Session ，就会出现明明用户已经登录了，但是后续的请求打在了其他机器上，导致用户会出现重复登录的情况，用户体验感不好。针对这个问题，需要我们去实现session的共享嘛，常见的实现方式就是将 Session 对象序列化放入 Redis 中进行共享，然后每一次的登录请求都去查询Redis。但是呢，这种方式也会出现一定的问题，。。。。。\n（你需要根据实际的场景去提前写好这些话术，你这一套话术下来，是不是达到了拖延时间的效果？你准备的这些话术中的内容的扩展问题你也回去准备的，是不是将面试官引入坑里面了？这一堆东西下来，是不是体现了你是一个【爱学习、爱动脑、有技术广度和深度并且有实际经验的人】？）\n公司招你肯定不是简单的让你做你熟悉的业务，而是想给你什么业务你都能够应对。\n你是一个厨师，业务需求就是食材，只会做几道菜的不叫做厨师。\n项目的亮点角度：架构、业务拆分、技术选型、大数据量处理\n如何写好简历避免已读不回？简历到底看什么？（校招）\n学历（至少全日制本科）\n专业排名（非科班成绩优异也可以，至少证明学习能力很强 &#x3D;&gt; 黑魔法）\n荣誉奖项（黑魔法，如果是大厂的话，斟酌一下，很有可能会让你提供证明材料）\n实习经历（大厂很加分，也可以黑魔法，但是不建议）\n\n学历这个东西确实没有办法，现在的大环境就是这样的，如果你是专科的同学，那么请先专升本，否则你可能会感慨世界的炎凉。（专升本你就写你本科的学历就好了，装傻）\n专业排名真的是最好造假的了，前20%？可以不？谁会去管呢？\n荣誉奖项也是，基本上不会查的，而且你也不会写什么特别高级的奖项，比如说 ACM金牌。。。（当然，如果是大厂的话，背景调查可能比较严格哦，请斟酌）\n实习经历也可以造假的，对，没错，只要你能唬住面试官。（大厂同样需要斟酌）\n如果是找实习的同学，那么肯定是没有实习经历这么一说的（除非你有过一段），那么重点在你的项目经历上。\n虽然说面试是介绍我们自己，但是前提是简历得入得了面试官的法眼，否则面试的资格都没有。\n一个项目的基本元素：\n项目名称（次要，但是不能太土）\n个人职责（在项目中负责什么，应届生次要）\n项目的线上地址（重要，增加项目的真实度）\n项目简介（重要，让面试官能够了解你这个项目的业务类型）\n项目的亮点（重要）\n\n对于项目简介，一定要言简意赅，主要是要让面试官知道你这个项目的大概业务有哪些。你做的那些项目基本上都能找到相似且开源的（大部分同学的项目也是根据这些开源的项目改的），所以没必要去过多的介绍。所以，这里你的项目名称最好是见名知意，比如说xx在线教育平台，面试官甚至都不用去读你的项目简介，就知道你这个项目的业务有哪些。\n对于项目的亮点，这个东西，得从实际的项目出发，体现出你的思考，还是那句话，可能项目真的没有什么亮点，就是一个很普通的CURD。但是，你可以通过引入一些其他的技术，去解决了什么问题，优化了什么东西。（无论是公司里面的大项目还是你的小项目，都会有bug和不足，不然为什么要持续的更新迭代，总会有问题的。）而且，你的亮点话术，要做到有针对性，而不是这些语句迁移到其他的项目上都能使用。\n(什么样的场景，通过什么方式，解决了什么问题或者优化了什么东西)\n如何做好自我介绍？（面试中最重要的环节）好的自我介绍有什么用？\n体现出你自己的价值和逻辑思维能力，快速让面试官对你感兴趣\n引导面试官对你进行提问\n\n什么是一份好的自我介绍？\n语言的流利程度，表达能力流畅的人，面试成功率会高很多。因为语言表达流利的话，证明了你的思维逻辑是流畅的，沟通能力是OK的。\n把自己相关的优势介绍清楚。\n能够讲清楚自己在项目中的职责，成果，并且有量化的数据支撑（人对数字是比较敏感的）。\n拉平和面试官之间的信息差，让面试官能够快速带入我们的项目中，能清楚他想要问的问题。\n\n很有必要去手写一份800字左右的自我介绍，在面试之前不断的打磨，这样才能在面试的时候流利的阐述。\n八股文怎么去准备怎么去回答？八股文这个东西是必须背的，你很难保证面试官不会去问，特别是对于应届生而言。\n八股文大概考什么？市面上的八股文这么多，动不动就几十万字的，没必要啊。这东西是有重点的：\n\njava基础：集合类、JVM、锁、多线程（这里会有实操，比如写代码实现三个线程交替打印“abc”）。\nJUC、AQS、线程池。线程池的核心参数，拒绝策略，队列有哪些。\nSpring、SpringMVC、SpringBoot：老演员了，问的也就那些东西（这里可以结合设计模式去讲，Spring中运用了大量的设计模式）。\nMySQL：。。。\nRedis：数据结构，一些机制。\n\n这里给鱼皮（B站搜索：程序员鱼皮）的面试鸭刷题网站打一个广告：https://www.mianshiya.com/\n这是一个专门为程序员提供的在线刷题平台，涵盖从IT各大学科的面试经典八股文，支持网页端和小程序端，目前（2024.10.20）永久会员只需要 129 元。\n（不要求每一道八股文你都能回答得很好，但是你必须有一两道八股文讲得非常出彩，结合自己的理解和实际的业务场景）\n总结总的来说，面试的宗旨就是：通过和面试官的沟通，去展示你的优秀，你是一个爱学习、爱动脑、有技术广度和深度并且有实际经验的人。\n","slug":"面试","date":"2024-11-12T02:10:49.000Z","categories_index":"","tags_index":"面试","author_index":"Crush"},{"id":"0f709ae9d76437c23b8e3099e047f571","title":"api开放平台前端登录","content":"\n\napi开放平台前端登录\n\n\n\n\n\n\n\n\n src&#x2F;pages&#x2F;User&#x2F;Login&#x2F;index.tsx原\n12345678910111213141516171819202122232425262728293031323334// 提交表单const handleSubmit = async (values: API.UserLoginRequest) =&gt; &#123;  try &#123;    // 登录    const msg = await userLoginUsingPost(&#123; ...values, &#125;);    if (msg.status === &#x27;ok&#x27;) &#123;      // 登录成功      const defaultLoginSuccessMessage = intl.formatMessage(&#123;        id: &#x27;pages.login.success&#x27;,        defaultMessage: &#x27;登录成功！&#x27;,      &#125;);      message.success(defaultLoginSuccessMessage);      // 获取用户信息      await fetchUserInfo();      // 获取跳转地址      const urlParams = new URL(window.location.href).searchParams;      // 跳转到指定地址      history.push(urlParams.get(&#x27;redirect&#x27;) || &#x27;/&#x27;);      return;    &#125;    console.log(msg);    // 如果失败去设置用户错误信息    setUserLoginState(msg);  &#125; catch (error) &#123;    // 登录失败    const defaultLoginFailureMessage = intl.formatMessage(&#123;      id: &#x27;pages.login.failure&#x27;,      defaultMessage: &#x27;登录失败，请重试！&#x27;,    &#125;);    console.log(error);    message.error(defaultLoginFailureMessage);  &#125;&#125;;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n app.tsx\n123456789101112131415161718192021222324252627282930313233343536373839404142// 导出一个异步函数，用于获取初始状态export async function getInitialState(): Promise&lt;&#123;  settings?: Partial&lt;LayoutSettings&gt;;  currentUser?: API.CurrentUser;  loading?: boolean;  fetchUserInfo?: () =&gt; Promise&lt;API.CurrentUser | undefined&gt;;&#125;&gt; &#123;  // 定义一个异步函数，用于获取当前用户信息  const fetchUserInfo = async () =&gt; &#123;    try &#123;      // 调用queryCurrentUser函数，获取当前用户信息      const msg = await queryCurrentUser(&#123;        skipErrorHandler: true,      &#125;);      // 返回当前用户信息      return msg.data;    &#125; catch (error) &#123;      // 如果发生错误，跳转到登录页面      history.push(loginPath);    &#125;    // 返回undefined    return undefined;  &#125;;  // 如果不是登录页面，执行  const &#123; location &#125; = history;  if (location.pathname !== loginPath) &#123;    // 调用fetchUserInfo函数，获取当前用户信息    const currentUser = await fetchUserInfo();    // 返回初始状态    return &#123;      fetchUserInfo,      currentUser,      settings: defaultSettings as Partial&lt;LayoutSettings&gt;,    &#125;;  &#125;  // 返回初始状态  return &#123;    fetchUserInfo,    settings: defaultSettings as Partial&lt;LayoutSettings&gt;,  &#125;;&#125;\n\n12345request?: (params: U &amp; &#123;    pageSize?: number;    current?: number;    keyword?: string;&#125;, sort: Record&lt;string, SortOrder&gt;, filter: Record&lt;string, (string | number)[] | null&gt;) =&gt; Promise&lt;Partial&lt;RequestData&lt;DataSource&gt;&gt;&gt;;\n","slug":"api用户平台","date":"2024-11-12T02:10:49.000Z","categories_index":"","tags_index":"项目","author_index":"Crush"},{"id":"bc567916c4dc0d8169bd26d18e348d36","title":"test","content":"欢迎使用 Markdown 笔记这是首次使用 Markdown 笔记 自动生成的内容，包含 Markdown 语法和应用介绍\n表格 &amp; 文本样式\n\n\n样式\n语法\n示例\n\n\n\n加粗\n前后 ** 或  __\n加粗1 加粗2\n\n\n斜体\n前后 * 或  _\n斜体1 斜体2\n\n\n删除线\n前后 ~~\n删除线\n\n\n内联代码\n前后 &#96;\ncode\n\n\n下划线\n前 &lt;u&gt;  后 &lt;/u&gt;\n下划线\n\n\n高亮\n前后 ==\n&#x3D;&#x3D;高亮文本&#x3D;&#x3D;\n\n\n引用\n\n\n\n\n\n\n\n\nuTools 新一代效率工具平台\n链接鼠标右击 或 Ctrl 键 + 点击 系统默认浏览器打开链接\nuTools 官网  猿料社区\n图片拖放图片文件、粘贴截图可直接将图片源数据存储到笔记中\n\n图片可拖动为文件到任意窗口使用\n无序列表\n项目\n项目 1\n项目 A\n项目 B\n\n\n项目 2\n\n\n\n有序列表\n项目 1\n项目 A\n项目 B\n\n\n项目 2\n\n任务列表\n A 计划\n A1 计划\n A2 计划\n\n\n B 计划\n\n代码块代码块支持 168 种编程语言\n12345678910111213141516// javascript 冒泡排序function bubbleSort(array) &#123;  let swapped = true;  do &#123;    swapped = false;    for (let j = 0; j &lt; array.length; j++) &#123;      if (array[j] &gt; array[j + 1]) &#123;        let temp = array[j];        array[j] = array[j + 1];        array[j + 1] = temp;        swapped = true;      &#125;    &#125;  &#125; while (swapped);  return array;&#125;\n\nKaTeX 数学公式内联公式质能方程 $E&#x3D;mc^2$\n公式块$$\\displaystyle \\left( \\sum_{k&#x3D;1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k&#x3D;1}^n a_k^2 \\right) \\left( \\sum_{k&#x3D;1}^n b_k^2 \\right)$$\n应用介绍特性\n极佳的 Markdown 编辑体验，实时预览、存储\n与传统富文本编辑方式结合，支持通用快捷键\n导出 MD、html、PDF、图片\n可快速搜索全部笔记(内容和标题)\n笔记名称可设置为 uTools 关键字，外部快速打开笔记\n\n使用技巧\n侧边栏文件夹或笔记，拖拽调整位置，鼠标右击 显示操作菜单\n当焦点未在编辑器，键盘上下方向键、 Tab 键切换笔记\n当焦点未在编辑器，Enter 进入编辑\nCommand/Ctrl+F 焦点切换到搜索\n编辑器中列表编辑时，按 Tab 变子项，Shift + Tab 恢复\n\n","slug":"test","date":"2024-11-09T02:38:44.000Z","categories_index":"","tags_index":"test","author_index":"Crush"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2024-11-07T16:24:53.067Z","categories_index":"","tags_index":"","author_index":"Crush"}]