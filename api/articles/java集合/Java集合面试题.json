{"title":"Java集合","uid":"fd2c15dc5d41ab5172de4dd08fd40ea9","slug":"java集合/Java集合面试题","date":"2024-12-03T17:46:32.000Z","updated":"2024-12-07T10:36:12.430Z","comments":true,"path":"api/articles/java集合/Java集合面试题.json","keywords":null,"cover":"https://i.pinimg.com/474x/42/8d/0e/428d0e475f1720f12a66e0d7f3474436.jpg","content":"<h2 id=\"Java集合\"><a href=\"#Java集合\" class=\"headerlink\" title=\"# Java集合\"></a><a href=\"#java%E9%9B%86%E5%90%88\">#</a> Java集合</h2><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"# 概念\"></a><a href=\"#%E6%A6%82%E5%BF%B5\">#</a> 概念</h2><h3 id=\"数组与集合区别，用过哪些？\"><a href=\"#数组与集合区别，用过哪些？\" class=\"headerlink\" title=\"# 数组与集合区别，用过哪些？\"></a><a href=\"#%E6%95%B0%E7%BB%84%E4%B8%8E%E9%9B%86%E5%90%88%E5%8C%BA%E5%88%AB-%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9B\">#</a> 数组与集合区别，用过哪些？</h3><p>数组和集合的区别：</p>\n<ul>\n<li>数组是固定长度的数据结构，一旦创建长度就无法改变，而集合是动态长度的数据结构，可以根据需要动态增加或减少元素。</li>\n<li>数组可以包含基本数据类型和对象，而集合只能包含对象。</li>\n<li>数组可以直接访问元素，而集合需要通过迭代器或其他方法访问元素。</li>\n</ul>\n<p>我用过的一些 Java 集合类：</p>\n<ol>\n<li><strong>ArrayList：</strong> 动态数组，实现了List接口，支持动态增长。</li>\n<li><strong>LinkedList：</strong> 双向链表，也实现了List接口，支持快速的插入和删除操作。</li>\n<li><strong>HashMap：</strong> 基于哈希表的Map实现，存储键值对，通过键快速查找值。</li>\n<li><strong>HashSet：</strong> 基于HashMap实现的Set集合，用于存储唯一元素。</li>\n<li><strong>TreeMap：</strong> 基于红黑树实现的有序Map集合，可以按照键的顺序进行排序。</li>\n<li><strong>LinkedHashMap：</strong> 基于哈希表和双向链表实现的Map集合，保持插入顺序或访问顺序。</li>\n<li><strong>PriorityQueue：</strong> 优先队列，可以按照比较器或元素的自然顺序进行排序。</li>\n</ol>\n<h3 id=\"说说Java中的集合？\"><a href=\"#说说Java中的集合？\" class=\"headerlink\" title=\"# 说说Java中的集合？\"></a><a href=\"#%E8%AF%B4%E8%AF%B4java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88\">#</a> 说说Java中的集合？</h3><p><img src=\"https://cdn.xiaolincoding.com//picgo/1717481094793-b8ffe6ae-2ee6-4de5-b61b-8468e32bf269.webp\" alt=\"img\">List是有序的Collection，使用此接口能够精确的控制每个元素的插入位置，用户能根据索引访问List中元素。常用的实现List的类有LinkedList，ArrayList，Vector，Stack。</p>\n<ul>\n<li>ArrayList是容量可变的非线程安全列表，其底层使用数组实现。当几何扩容时，会创建更大的数组，并把原数组复制到新数组。ArrayList支持对元素的快速随机访问，但插入与删除速度很慢。</li>\n<li>LinkedList本质是一个双向链表，与ArrayList相比，，其插入和删除速度更快，但随机访问速度更慢。</li>\n</ul>\n<p>Set不允许存在重复的元素，与List不同，set中的元素是无序的。常用的实现有HashSet，LinkedHashSet和TreeSet。</p>\n<ul>\n<li>HashSet通过HashMap实现，HashMap的Key即HashSet存储的元素，所有Key都是用相同的Value，一个名为PRESENT的Object类型常量。使用Key保证元素唯一性，但不保证有序性。由于HashSet是HashMap实现的，因此线程不安全。</li>\n<li>LinkedHashSet继承自HashSet，通过LinkedHashMap实现，使用双向链表维护元素插入顺序。</li>\n<li>TreeSet通过TreeMap实现的，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。</li>\n</ul>\n<p>Map 是一个键值对集合，存储键、值和之间的映射。Key 无序，唯一；value 不要求有序，允许重复。Map 没有继承于 Collection 接口，从 Map 集合中检索元素时，只要给出键对象，就会返回对应的值对象。主要实现有TreeMap、HashMap、HashTable、LinkedHashMap、ConcurrentHashMap</p>\n<ul>\n<li>HashMap：JDK1.8 之前 HashMap 由数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突），JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树，以减少搜索时间</li>\n<li>LinkedHashMap：LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</li>\n<li>HashTable：数组+链表组成的，数组是 HashTable 的主体，链表则是主要为了解决哈希冲突而存在的</li>\n<li>TreeMap：红黑树（自平衡的排序二叉树）</li>\n<li>ConcurrentHashMap：Node数组+链表+红黑树实现，线程安全的（jdk1.8以前Segment锁，1.8以后volatile + CAS 或者 synchronized）</li>\n</ul>\n<h3 id=\"Java中的线程安全的集合是什么？\"><a href=\"#Java中的线程安全的集合是什么？\" class=\"headerlink\" title=\"# Java中的线程安全的集合是什么？\"></a><a href=\"#java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%E6%98%AF%E4%BB%80%E4%B9%88\">#</a> Java中的线程安全的集合是什么？</h3><p>在 java.util 包中的线程安全的类主要 2 个，其他都是非线程安全的。</p>\n<ul>\n<li><strong>Vector</strong>：线程安全的动态数组，其内部方法基本都经过synchronized修饰，如果不需要线程安全，并不建议选择，毕竟同步是有额外开销的。Vector 内部是使用对象数组来保存数据，可以根据需要自动的增加容量，当数组已满时，会创建新的数组，并拷贝原有数组数据。</li>\n<li><strong>Hashtable</strong>：线程安全的哈希表，HashTable 的加锁方法是给每个方法加上 synchronized 关键字，这样锁住的是整个 Table 对象，不支持 null 键和值，由于同步导致的性能开销，所以已经很少被推荐使用，如果要保证线程安全的哈希表，可以用ConcurrentHashMap。</li>\n</ul>\n<p>java.util.concurrent 包提供的都是线程安全的集合：</p>\n<p>并发Map：</p>\n<ul>\n<li><strong>ConcurrentHashMap</strong>：它与 HashTable 的主要区别是二者加锁粒度的不同，在<strong>JDK1.7</strong>，ConcurrentHashMap加的是分段锁，也就是Segment锁，每个Segment 含有整个 table 的一部分，这样不同分段之间的并发操作就互不影响。在<strong>JDK 1.8</strong> ，它取消了Segment字段，直接在table元素上加锁，实现对每一行进行加锁，进一步减小了并发冲突的概率。对于put操作，如果Key对应的数组元素为null，则通过CAS操作（Compare and Swap）将其设置为当前值。如果Key对应的数组元素（也即链表表头或者树的根元素）不为null，则对该元素使用 synchronized 关键字申请锁，然后进行操作。如果该 put 操作使得当前链表长度超过一定阈值，则将该链表转换为红黑树，从而提高寻址效率。</li>\n<li><strong>ConcurrentSkipListMap</strong>：实现了一个基于SkipList（跳表）算法的可排序的并发集合，SkipList是一种可以在对数预期时间内完成搜索、插入、删除等操作的数据结构，通过维护多个指向其他元素的“跳跃”链接来实现高效查找。</li>\n</ul>\n<p>并发Set：</p>\n<ul>\n<li><strong>ConcurrentSkipListSet</strong>：是线程安全的有序的集合。底层是使用ConcurrentSkipListMap实现。</li>\n<li><strong>CopyOnWriteArraySet</strong>：是线程安全的Set实现，它是线程安全的无序的集合，可以将它理解成线程安全的HashSet。有意思的是，CopyOnWriteArraySet和HashSet虽然都继承于共同的父类AbstractSet；但是，HashSet是通过“散列表”实现的，而CopyOnWriteArraySet则是通过“动态数组(CopyOnWriteArrayList)”实现的，并不是散列表。</li>\n</ul>\n<p>并发List：</p>\n<ul>\n<li><strong>CopyOnWriteArrayList</strong>：它是 ArrayList 的线程安全的变体，其中所有写操作（add，set等）都通过对底层数组进行全新复制来实现，允许存储 null 元素。即当对象进行写操作时，使用了Lock锁做同步处理，内部拷贝了原数组，并在新数组上进行添加操作，最后将新数组替换掉旧数组；若进行的读操作，则直接返回结果，操作过程中不需要进行同步。</li>\n</ul>\n<p>并发 Queue：</p>\n<ul>\n<li><strong>ConcurrentLinkedQueue</strong>：是一个适用于高并发场景下的队列，它通过无锁的方式(CAS)，实现了高并发状态下的高性能。通常，ConcurrentLinkedQueue 的性能要好于 BlockingQueue 。</li>\n<li><strong>BlockingQueue</strong>：与 ConcurrentLinkedQueue 的使用场景不同，BlockingQueue 的主要功能并不是在于提升高并发时的队列性能，而在于简化多线程间的数据共享。BlockingQueue 提供一种读写阻塞等待的机制，即如果消费者速度较快，则 BlockingQueue 则可能被清空，此时消费线程再试图从 BlockingQueue 读取数据时就会被阻塞。反之，如果生产线程较快，则 BlockingQueue 可能会被装满，此时，生产线程再试图向 BlockingQueue 队列装入数据时，便会被阻塞等待。</li>\n</ul>\n<p>并发 Deque：</p>\n<ul>\n<li><strong>LinkedBlockingDeque</strong>：是一个线程安全的双端队列实现。它的内部使用链表结构，每一个节点都维护了一个前驱节点和一个后驱节点。LinkedBlockingDeque 没有进行读写锁的分离，因此同一时间只能有一个线程对其进行操作</li>\n<li><strong>ConcurrentLinkedDeque</strong>：ConcurrentLinkedDeque是一种基于链接节点的无限并发链表。可以安全地并发执行插入、删除和访问操作。当许多线程同时访问一个公共集合时，ConcurrentLinkedDeque是一个合适的选择。</li>\n</ul>\n<h3 id=\"Collections和Collection的区别\"><a href=\"#Collections和Collection的区别\" class=\"headerlink\" title=\"# Collections和Collection的区别\"></a><a href=\"#collections%E5%92%8Ccollection%E7%9A%84%E5%8C%BA%E5%88%AB\">#</a> Collections和Collection的区别</h3><ul>\n<li>Collection是Java集合框架中的一个接口，它是所有集合类的基础接口。它定义了一组通用的操作和方法，如添加、删除、遍历等，用于操作和管理一组对象。Collection接口有许多实现类，如List、Set和Queue等。</li>\n<li>Collections（注意有一个s）是Java提供的一个工具类，位于java.util包中。它提供了一系列静态方法，用于对集合进行操作和算法。Collections类中的方法包括排序、查找、替换、反转、随机化等等。这些方法可以对实现了Collection接口的集合进行操作，如List和Set。</li>\n</ul>\n<h3 id=\"集合遍历的方法有哪些？\"><a href=\"#集合遍历的方法有哪些？\" class=\"headerlink\" title=\"# 集合遍历的方法有哪些？\"></a><a href=\"#%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B\">#</a> 集合遍历的方法有哪些？</h3><p>在Java中，集合的遍历方法主要有以下几种：</p>\n<ul>\n<li><strong>普通 for 循环：</strong> 可以使用带有索引的普通 for 循环来遍历 List。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">element</span> <span class=\"operator\">=</span> list.get(i);</span><br><span class=\"line\">    System.out.println(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>增强 for 循环（for-each循环）：</strong> 用于循环访问数组或集合中的元素。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String element : list) &#123;</span><br><span class=\"line\">    System.out.println(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Iterator 迭代器：</strong> 可以使用迭代器来遍历集合，特别适用于需要删除元素的情况。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">element</span> <span class=\"operator\">=</span> iterator.next();</span><br><span class=\"line\">    System.out.println(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ListIterator 列表迭代器：</strong> ListIterator是迭代器的子类，可以双向访问列表并在迭代过程中修改元素。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ListIterator&lt;String&gt; listIterator= list.listIterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(listIterator.hasNext()) &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">element</span> <span class=\"operator\">=</span> listIterator.next();</span><br><span class=\"line\">    System.out.println(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>使用 forEach 方法：</strong> Java 8引入了 forEach 方法，可以对集合进行快速遍历。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">list.forEach(element -&gt; System.out.println(element));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Stream API：</strong> Java 8的Stream API提供了丰富的功能，可以对集合进行函数式操作，如过滤、映射等。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">list.stream().forEach(element -&gt; System.out.println(element));</span><br></pre></td></tr></table></figure>\n\n<p>这些是常用的集合遍历方法，根据情况选择合适的方法来遍历和操作集合。</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"# List\"></a><a href=\"#list\">#</a> List</h2><h3 id=\"讲一下java里面list的几种实现，几种实现有什么不同？\"><a href=\"#讲一下java里面list的几种实现，几种实现有什么不同？\" class=\"headerlink\" title=\"# 讲一下java里面list的几种实现，几种实现有什么不同？\"></a><a href=\"#%E8%AE%B2%E4%B8%80%E4%B8%8Bjava%E9%87%8C%E9%9D%A2list%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0-%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C\">#</a> 讲一下java里面list的几种实现，几种实现有什么不同？</h3><p>在Java中，<code>List</code>接口是最常用的集合类型之一，用于存储元素的有序集合。以下是Java中常见的<code>List</code>实现及其特点： <img src=\"https://cdn.xiaolincoding.com//picgo/1721807143695-c1058186-be42-4746-a273-6302a128e328.png\" alt=\"image.png\"></p>\n<ul>\n<li>Vector 是 Java 早期提供的线程安全的动态数组，如果不需要线程安全，并不建议选择，毕竟同步是有额外开销的。Vector 内部是使用对象数组来保存数据，可以根据需要自动的增加容量，当数组已满时，会创建新的数组，并拷贝原有数组数据。</li>\n<li>ArrayList 是应用更加广泛的动态数组实现，它本身不是线程安全的，所以性能要好很多。与 Vector 近似，ArrayList 也是可以根据需要调整容量，不过两者的调整逻辑有所区别，Vector 在扩容时会提高 1 倍，而 ArrayList 则是增加 50%。</li>\n<li>LinkedList 顾名思义是 Java 提供的双向链表，所以它不需要像上面两种那样调整容量，它也不是线程安全的。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这几种实现具体在什么场景下应该用哪种？</p></blockquote>\n<ul>\n<li>Vector 和 ArrayList 作为动态数组，其内部元素以数组形式顺序存储的，所以非常适合随机访问的场合。除了尾部插入和删除元素，往往性能会相对较差，比如我们在中间位置插入一个元素，需要移动后续所有元素。</li>\n<li>而 LinkedList 进行节点插入、删除却要高效得多，但是随机访问性能则要比动态数组慢。</li>\n</ul>\n<h3 id=\"Arraylist和LinkedList的区别，哪个集合是线程安全的？\"><a href=\"#Arraylist和LinkedList的区别，哪个集合是线程安全的？\" class=\"headerlink\" title=\"# Arraylist和LinkedList的区别，哪个集合是线程安全的？\"></a><a href=\"#arraylist%E5%92%8Clinkedlist%E7%9A%84%E5%8C%BA%E5%88%AB-%E5%93%AA%E4%B8%AA%E9%9B%86%E5%90%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84\">#</a> Arraylist和LinkedList的区别，哪个集合是线程安全的？</h3><p>ArrayList和LinkedList都是Java中常见的集合类，它们都实现了List接口。</p>\n<ul>\n<li><strong>底层数据结构不同</strong>：ArrayList使用数组实现，通过索引进行快速访问元素。LinkedList使用链表实现，通过节点之间的指针进行元素的访问和操作。</li>\n<li><strong>插入和删除操作的效率不同</strong>：ArrayList在尾部的插入和删除操作效率较高，但在中间或开头的插入和删除操作效率较低，需要移动元素。LinkedList在任意位置的插入和删除操作效率都比较高，因为只需要调整节点之间的指针，但是LinkedList是不支持随机访问的，所以除了头结点外插入和删除的时间复杂度都是0(n)，效率也不是很高所以LinkedList基本没人用。</li>\n<li><strong>随机访问的效率不同</strong>：ArrayList支持通过索引进行快速随机访问，时间复杂度为O(1)。LinkedList需要从头或尾开始遍历链表，时间复杂度为O(n)。</li>\n<li><strong>空间占用</strong>：ArrayList在创建时需要分配一段连续的内存空间，因此会占用较大的空间。LinkedList每个节点只需要存储元素和指针，因此相对较小。</li>\n<li><strong>使用场景</strong>：ArrayList适用于频繁随机访问和尾部的插入删除操作，而LinkedList适用于频繁的中间插入删除操作和不需要随机访问的场景。</li>\n<li><strong>线程安全</strong>：这两个集合都不是线程安全的，Vector是线程安全的</li>\n</ul>\n<h3 id=\"ArrayList线程安全吗？把ArrayList变成线程安全有哪些方法？\"><a href=\"#ArrayList线程安全吗？把ArrayList变成线程安全有哪些方法？\" class=\"headerlink\" title=\"# ArrayList线程安全吗？把ArrayList变成线程安全有哪些方法？\"></a><a href=\"#arraylist%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%90%97-%E6%8A%8Aarraylist%E5%8F%98%E6%88%90%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95\">#</a> ArrayList线程安全吗？把ArrayList变成线程安全有哪些方法？</h3><p>不是线程安全的，ArrayList变成线程安全的方式有：</p>\n<ul>\n<li>使用Collections类的synchronizedList方法将ArrayList包装成线程安全的List：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; synchronizedList = Collections.synchronizedList(arrayList);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用CopyOnWriteArrayList类代替ArrayList，它是一个线程安全的List实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CopyOnWriteArrayList&lt;String&gt; copyOnWriteArrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArrayList</span>&lt;&gt;(arrayList);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用Vector类代替ArrayList，Vector是线程安全的List实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector&lt;String&gt; vector = <span class=\"keyword\">new</span> <span class=\"title class_\">Vector</span>&lt;&gt;(arrayList);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么ArrayList不是线程安全的，具体来说是哪里不安全？\"><a href=\"#为什么ArrayList不是线程安全的，具体来说是哪里不安全？\" class=\"headerlink\" title=\"# 为什么ArrayList不是线程安全的，具体来说是哪里不安全？\"></a><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88arraylist%E4%B8%8D%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84-%E5%85%B7%E4%BD%93%E6%9D%A5%E8%AF%B4%E6%98%AF%E5%93%AA%E9%87%8C%E4%B8%8D%E5%AE%89%E5%85%A8\">#</a> 为什么ArrayList不是线程安全的，具体来说是哪里不安全？</h3><p>在高并发添加数据下，ArrayList会暴露三个问题;</p>\n<ul>\n<li>部分值为null（我们并没有add null进去）</li>\n<li>索引越界异常</li>\n<li>size与我们add的数量不符</li>\n</ul>\n<p>为了知道这三种情况是怎么发生的，ArrayList，add 增加元素的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">        elementData[size++] = e;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>ensureCapacityInternal()这个方法的详细代码我们可以暂时不看，它的作用就是判断如果将当前的新元素加到列表后面，列表的elementData数组的大小是否满足，如果size + 1的这个需求长度大于了elementData这个数组的长度，那么就要对这个数组进行扩容。</p>\n<p>大体可以分为三步：</p>\n<ul>\n<li>判断数组需不需要扩容，如果需要的话，调用grow方法进行扩容；</li>\n<li>将数组的size位置设置值（因为数组的下标是从0开始的）；</li>\n<li>将当前集合的大小加1</li>\n</ul>\n<p>下面我们来分析三种情况都是如何产生的：</p>\n<ul>\n<li>部分值为null：当线程1走到了扩容那里发现当前size是9，而数组容量是10，所以不用扩容，这时候cpu让出执行权，线程2也进来了，发现size是9，而数组容量是10，所以不用扩容，这时候线程1继续执行，将数组下标索引为9的位置set值了，还没有来得及执行size++，这时候线程2也来执行了，又把数组下标索引为9的位置set了一遍，这时候两个先后进行size++，导致下标索引10的地方就为null了。</li>\n<li>索引越界异常：线程1走到扩容那里发现当前size是9，数组容量是10不用扩容，cpu让出执行权，线程2也发现不用扩容，这时候数组的容量就是10，而线程1 set完之后size++，这时候线程2再进来size就是10，数组的大小只有10，而你要设置下标索引为10的就会越界（数组的下标索引从0开始）；</li>\n<li>size与我们add的数量不符：这个基本上每次都会发生，这个理解起来也很简单，因为size++本身就不是原子操作，可以分为三步：获取size的值，将size的值加1，将新的size值覆盖掉原来的，线程1和线程2拿到一样的size值加完了同时覆盖，就会导致一次没有加上，所以肯定不会与我们add的数量保持一致的；</li>\n</ul>\n<h3 id=\"ArrayList-和-LinkedList-的应用场景？\"><a href=\"#ArrayList-和-LinkedList-的应用场景？\" class=\"headerlink\" title=\"# ArrayList 和 LinkedList 的应用场景？\"></a><a href=\"#arraylist-%E5%92%8C-linkedlist-%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\">#</a> ArrayList 和 LinkedList 的应用场景？</h3><ul>\n<li>ArrayList适用于需要频繁访问集合元素的场景。它基于数组实现，可以通过索引快速访问元素，因此在按索引查找、遍历和随机访问元素的操作上具有较高的性能。当需要频繁访问和遍历集合元素，并且集合大小不经常改变时，推荐使用ArrayList</li>\n<li>LinkedList适用于频繁进行插入和删除操作的场景。它基于链表实现，插入和删除元素的操作只需要调整节点的指针，因此在插入和删除操作上具有较高的性能。当需要频繁进行插入和删除操作，或者集合大小经常改变时，可以考虑使用LinkedList。</li>\n</ul>\n<h3 id=\"ArrayList的扩容机制说一下\"><a href=\"#ArrayList的扩容机制说一下\" class=\"headerlink\" title=\"# ArrayList的扩容机制说一下\"></a><a href=\"#arraylist%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6%E8%AF%B4%E4%B8%80%E4%B8%8B\">#</a> ArrayList的扩容机制说一下</h3><p>ArrayList在添加元素时，如果当前元素个数已经达到了内部数组的容量上限，就会触发扩容操作。ArrayList的扩容操作主要包括以下几个步骤：</p>\n<ul>\n<li>计算新的容量：一般情况下，新的容量会扩大为原容量的1.5倍（在JDK 10之后，扩容策略做了调整），然后检查是否超过了最大容量限制。</li>\n<li>创建新的数组：根据计算得到的新容量，创建一个新的更大的数组。</li>\n<li>将元素复制：将原来数组中的元素逐个复制到新数组中。</li>\n<li>更新引用：将ArrayList内部指向原数组的引用指向新数组。</li>\n<li>完成扩容：扩容完成后，可以继续添加新元素。</li>\n</ul>\n<p>ArrayList的扩容操作涉及到数组的复制和内存的重新分配，所以在频繁添加大量元素时，扩容操作可能会影响性能。为了减少扩容带来的性能损耗，可以在初始化ArrayList时预分配足够大的容量，避免频繁触发扩容操作。</p>\n<p>之所以扩容是 1.5 倍，是因为 1.5 可以充分利用移位操作，减少浮点数或者运算时间和运算次数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新容量计算</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">newCapacity</span> <span class=\"operator\">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程安全的-List，-CopyonWriteArraylist是如何实现线程安全的\"><a href=\"#线程安全的-List，-CopyonWriteArraylist是如何实现线程安全的\" class=\"headerlink\" title=\"# 线程安全的 List， CopyonWriteArraylist是如何实现线程安全的\"></a><a href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84-list-copyonwritearraylist%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84\">#</a> 线程安全的 List， CopyonWriteArraylist是如何实现线程安全的</h3><p>CopyOnWriteArrayList底层也是通过一个数组保存数据，使用volatile关键字修饰数组，保证当前线程对数组对象重新赋值后，其他线程可以及时感知到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Object[] array;</span><br></pre></td></tr></table></figure>\n\n<p>在写入操作时，加了一把互斥锁ReentrantLock以保证线程安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取锁</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">    <span class=\"comment\">//加锁</span></span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取到当前List集合保存数据的数组</span></span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"comment\">//获取该数组的长度（这是一个伏笔，同时len也是新数组的最后一个元素的索引值）</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> elements.length;</span><br><span class=\"line\">        <span class=\"comment\">//将当前数组拷贝一份的同时，让其长度加1</span></span><br><span class=\"line\">        Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将加入的元素放在新数组最后一位，len不是旧数组长度吗，为什么现在用它当成新数组的最后一个元素的下标？建议自行画图推演，就很容易理解。</span></span><br><span class=\"line\">        newElements[len] = e;</span><br><span class=\"line\">        <span class=\"comment\">//替换引用，将数组的引用指向给新数组的地址</span></span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//释放锁</span></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到源码可以知道写入新元素时，首先会先将原来的数组拷贝一份并且让原来数组的长度+1后就得到了一个新数组，新数组里的元素和旧数组的元素一样并且长度比旧数组多一个长度，然后将新加入的元素放置都在新数组最后一个位置后，用新数组的地址替换掉老数组的地址就能得到最新的数据了。</p>\n<p>在我们执行替换地址操作之前，读取的是老数组的数据，数据是有效数据；执行替换地址操作之后，读取的是新数组的数据，同样也是有效数据，而且使用该方式能比读写都加锁要更加的效率。</p>\n<p>现在我们来看读操作，读是没有加锁的，所以读是一直都能读</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> E <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(getArray(), index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"# Map\"></a><a href=\"#map\">#</a> Map</h2><h3 id=\"HashMap实现原理介绍一下？\"><a href=\"#HashMap实现原理介绍一下？\" class=\"headerlink\" title=\"# HashMap实现原理介绍一下？\"></a><a href=\"#hashmap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B\">#</a> HashMap实现原理介绍一下？</h3><p>在 JDK 1.7 版本之前， HashMap 数据结构是数组和链表，HashMap通过哈希算法将元素的键（Key）映射到数组中的槽位（Bucket）。如果多个键映射到同一个槽位，它们会以链表的形式存储在同一个槽位上，因为链表的查询时间是O(n)，所以冲突很严重，一个索引上的链表非常长，效率就很低了。 <img src=\"https://cdn.xiaolincoding.com//picgo/1719565480532-57a14329-c36b-4514-8e7d-2f2f1df88a82.webp\"> 所以在 <strong>JDK 1.8</strong> 版本的时候做了优化，当一个链表的长度超过8的时候就转换数据结构，不再使用链表存储，而是使用<strong>红黑树</strong>，查找时使用红黑树，时间复杂度O（log n），可以提高查询性能，但是在数量较少时，即数量小于6时，会将红黑树转换回链表。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1719565481289-0c2164f4-f755-46e3-bb39-b5f28621bb6b.webp\"></p>\n<h3 id=\"了解的哈希冲突解决方法有哪些？\"><a href=\"#了解的哈希冲突解决方法有哪些？\" class=\"headerlink\" title=\"# 了解的哈希冲突解决方法有哪些？\"></a><a href=\"#%E4%BA%86%E8%A7%A3%E7%9A%84%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B\">#</a> 了解的哈希冲突解决方法有哪些？</h3><ul>\n<li>链接法：使用链表或其他数据结构来存储冲突的键值对，将它们链接在同一个哈希桶中。</li>\n<li>开放寻址法：在哈希表中找到另一个可用的位置来存储冲突的键值对，而不是存储在链表中。常见的开放寻址方法包括线性探测、二次探测和双重散列。</li>\n<li>再哈希法（Rehashing）：当发生冲突时，使用另一个哈希函数再次计算键的哈希值，直到找到一个空槽来存储键值对。</li>\n<li>哈希桶扩容：当哈希冲突过多时，可以动态地扩大哈希桶的数量，重新分配键值对，以减少冲突的概率。</li>\n</ul>\n<h3 id=\"HashMap是线程安全的吗？\"><a href=\"#HashMap是线程安全的吗？\" class=\"headerlink\" title=\"# HashMap是线程安全的吗？\"></a><a href=\"#hashmap%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97\">#</a> HashMap是线程安全的吗？</h3><p>hashmap不是线程安全的，hashmap在多线程会存在下面的问题：</p>\n<ul>\n<li>JDK 1.7 HashMap 采用数组 + 链表的数据结构，多线程背景下，在数组扩容的时候，存在 Entry 链死循环和数据丢失问题。</li>\n<li>JDK 1.8 HashMap 采用数组 + 链表 + 红黑二叉树的数据结构，优化了 1.7 中数组扩容的方案，解决了 Entry 链死循环和数据丢失问题。但是多线程背景下，put 方法存在数据覆盖的问题。</li>\n</ul>\n<p>如果要保证线程安全，可以通过这些方法来保证：</p>\n<ul>\n<li><p>多线程环境可以使用Collections.synchronizedMap同步加锁的方式，还可以使用HashTable，但是同步的方式显然性能不达标，而ConurrentHashMap更适合高并发场景使用。</p>\n</li>\n<li><p>ConcurrentHashmap在JDK1.7和1.8的版本改动比较大，1.7使用Segment+HashEntry分段锁的方式实现，1.8则抛弃了Segment，改为使用CAS+synchronized+Node实现，同样也加入了红黑树，避免链表过长导致性能的问题。</p>\n</li>\n</ul>\n<h3 id=\"hashmap的put过程介绍一下\"><a href=\"#hashmap的put过程介绍一下\" class=\"headerlink\" title=\"# hashmap的put过程介绍一下\"></a><a href=\"#hashmap%E7%9A%84put%E8%BF%87%E7%A8%8B%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B\">#</a> hashmap的put过程介绍一下</h3><p><img src=\"https://cdn.xiaolincoding.com//picgo/1720684054342-1e3cb2a9-532e-40b8-b5cf-0043811391dc.png\"></p>\n<p>HashMap HashMap的put()方法用于向HashMap中添加键值对，当调用HashMap的put()方法时，会按照以下详细流程执行（JDK8 1.8版本）：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>第一步：根据要添加的键的哈希码计算在数组中的位置（索引）。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>第二步：检查该位置是否为空（即没有键值对存在）</p></blockquote>\n<ul>\n<li>如果为空，则直接在该位置创建一个新的Entry对象来存储键值对。将要添加的键值对作为该Entry的键和值，并保存在数组的对应位置。将HashMap的修改次数（modCount）加1，以便在进行迭代时发现并发修改。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>第三步：如果该位置已经存在其他键值对，检查该位置的第一个键值对的哈希码和键是否与要添加的键值对相同？</p></blockquote>\n<ul>\n<li>如果相同，则表示找到了相同的键，直接将新的值替换旧的值，完成更新操作。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>第四步：如果第一个键值对的哈希码和键不相同，则需要遍历链表或红黑树来查找是否有相同的键：</p></blockquote>\n<p>如果键值对集合是链表结构，从链表的头部开始逐个比较键的哈希码和equals()方法，直到找到相同的键或达到链表末尾。</p>\n<ul>\n<li>如果找到了相同的键，则使用新的值取代旧的值，即更新键对应的值。</li>\n<li>如果没有找到相同的键，则将新的键值对添加到链表的头部。</li>\n</ul>\n<p>如果键值对集合是红黑树结构，在红黑树中使用哈希码和equals()方法进行查找。根据键的哈希码，定位到红黑树中的某个节点，然后逐个比较键，直到找到相同的键或达到红黑树末尾。</p>\n<ul>\n<li>如果找到了相同的键，则使用新的值取代旧的值，即更新键对应的值。</li>\n<li>如果没有找到相同的键，则将新的键值对添加到红黑树中。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>第五步：检查链表长度是否达到阈值（默认为8）：</p></blockquote>\n<ul>\n<li>如果链表长度超过阈值，且HashMap的数组长度大于等于64，则会将链表转换为红黑树，以提高查询效率。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>第六步：检查负载因子是否超过阈值（默认为0.75）：</p></blockquote>\n<ul>\n<li>如果键值对的数量（size）与数组的长度的比值大于阈值，则需要进行扩容操作。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>第七步：扩容操作：</p></blockquote>\n<ul>\n<li>创建一个新的两倍大小的数组。</li>\n<li>将旧数组中的键值对重新计算哈希码并分配到新数组中的位置。</li>\n<li>更新HashMap的数组引用和阈值参数。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>第八步：完成添加操作。</p></blockquote>\n<p>此外，HashMap是非线程安全的，如果在多线程环境下使用，需要采取额外的同步措施或使用线程安全的ConcurrentHashMap。</p>\n<h3 id=\"HashMap的put-key-val-和get-key-过程\"><a href=\"#HashMap的put-key-val-和get-key-过程\" class=\"headerlink\" title=\"# HashMap的put(key,val)和get(key)过程\"></a><a href=\"#hashmap%E7%9A%84put-key-val-%E5%92%8Cget-key-%E8%BF%87%E7%A8%8B\">#</a> HashMap的put(key,val)和get(key)过程</h3><ul>\n<li>存储对象时，我们将K&#x2F;V传给put方法时，它调用hashCode计算hash从而得到bucket位置，进一步存储，HashMap会根据当前bucket的占用情况自动调整容量(超过Load Facotr则resize为原来的2倍)。</li>\n<li>获取对象时，我们将K传给get，它调用hashCode计算hash从而得到bucket位置，并进一步调用equals()方法确定键值对。如果发生碰撞的时候，Hashmap通过链表将产生碰撞冲突的元素组织起来，在Java 8中，如果一个bucket中碰撞冲突的元素超过某个限制(默认是8)，则使用红黑树来替换链表，从而提高速度。</li>\n</ul>\n<h3 id=\"hashmap-调用get方法一定安全吗？\"><a href=\"#hashmap-调用get方法一定安全吗？\" class=\"headerlink\" title=\"# hashmap 调用get方法一定安全吗？\"></a><a href=\"#hashmap-%E8%B0%83%E7%94%A8get%E6%96%B9%E6%B3%95%E4%B8%80%E5%AE%9A%E5%AE%89%E5%85%A8%E5%90%97\">#</a> hashmap 调用get方法一定安全吗？</h3><p>不是，调用 get 方法有几点需要注意的地方：</p>\n<ul>\n<li><strong>空指针异常（NullPointerException）</strong>：如果你尝试用 <code>null</code> 作为键调用 <code>get</code> 方法，而 <code>HashMap</code> 没有被初始化（即为 <code>null</code>），那么会抛出空指针异常。不过，如果 <code>HashMap</code> 已经初始化，使用 <code>null</code> 作为键是允许的，因为 <code>HashMap</code> 支持 <code>null</code> 键。</li>\n<li><strong>线程安全</strong>：<code>HashMap</code> 本身不是线程安全的。如果在多线程环境中，没有适当的同步措施，同时对 <code>HashMap</code> 进行读写操作可能会导致不可预测的行为。例如，在一个线程中调用 <code>get</code> 方法读取数据，而另一个线程同时修改了结构（如增加或删除元素），可能会导致读取操作得到错误的结果或抛出 <code>ConcurrentModificationException</code>。如果需要在多线程环境中使用类似 <code>HashMap</code> 的数据结构，可以考虑使用 <code>ConcurrentHashMap</code>。</li>\n</ul>\n<h3 id=\"HashMap一般用什么做Key？为啥String适合做Key呢？\"><a href=\"#HashMap一般用什么做Key？为啥String适合做Key呢？\" class=\"headerlink\" title=\"# HashMap一般用什么做Key？为啥String适合做Key呢？\"></a><a href=\"#hashmap%E4%B8%80%E8%88%AC%E7%94%A8%E4%BB%80%E4%B9%88%E5%81%9Akey-%E4%B8%BA%E5%95%A5string%E9%80%82%E5%90%88%E5%81%9Akey%E5%91%A2\">#</a> HashMap一般用什么做Key？为啥String适合做Key呢？</h3><p>用 string 做 key，因为 String对象是不可变的，一旦创建就不能被修改，这确保了Key的稳定性。如果Key是可变的，可能会导致hashCode和equals方法的不一致，进而影响HashMap的正确性。</p>\n<h3 id=\"为什么HashMap要用红黑树而不是平衡二叉树？\"><a href=\"#为什么HashMap要用红黑树而不是平衡二叉树？\" class=\"headerlink\" title=\"# 为什么HashMap要用红黑树而不是平衡二叉树？\"></a><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88hashmap%E8%A6%81%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91%E8%80%8C%E4%B8%8D%E6%98%AF%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91\">#</a> 为什么HashMap要用红黑树而不是平衡二叉树？</h3><ul>\n<li>平衡二叉树追求的是一种 <strong>“完全平衡”</strong> 状态：任何结点的左右子树的高度差不会超过 1，优势是树的结点是很平均分配的。这个要求实在是太严了，导致每次进行插入&#x2F;删除节点的时候，几乎都会破坏平衡树的第二个规则，进而我们都需要通过<strong>左旋</strong>和<strong>右旋</strong>来进行调整，使之再次成为一颗符合要求的平衡树。</li>\n<li>红黑树不追求这种完全平衡状态，而是追求一种 <strong>“弱平衡”</strong> 状态：整个树最长路径不会超过最短路径的 2 倍。优势是虽然牺牲了一部分查找的性能效率，但是能够换取一部分维持树平衡状态的成本。与平衡树不同的是，红黑树在插入、删除等操作，<strong>不会像平衡树那样，频繁着破坏红黑树的规则，所以不需要频繁着调整</strong>，这也是我们为什么大多数情况下使用红黑树的原因。</li>\n</ul>\n<h3 id=\"hashmap-key可以为null吗？\"><a href=\"#hashmap-key可以为null吗？\" class=\"headerlink\" title=\"# hashmap key可以为null吗？\"></a><a href=\"#hashmap-key%E5%8F%AF%E4%BB%A5%E4%B8%BAnull%E5%90%97\">#</a> hashmap key可以为null吗？</h3><p>可以为 null。</p>\n<ul>\n<li>hashMap中使用hash()方法来计算key的哈希值，当key为空时，直接另key的哈希值为0，不走key.hashCode()方法；</li>\n</ul>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1720685862193-66a32b79-ddf0-46d5-87df-d2fc2b3d87cb.png\" alt=\"img\"></p>\n<ul>\n<li>hashMap虽然支持key和value为null，但是null作为key只能有一个，null作为value可以有多个；</li>\n<li>因为hashMap中，如果key值一样，那么会覆盖相同key值的value为最新，所以key为null只能有一个。</li>\n</ul>\n<h3 id=\"重写HashMap的equal和hashcode方法需要注意什么？\"><a href=\"#重写HashMap的equal和hashcode方法需要注意什么？\" class=\"headerlink\" title=\"# 重写HashMap的equal和hashcode方法需要注意什么？\"></a><a href=\"#%E9%87%8D%E5%86%99hashmap%E7%9A%84equal%E5%92%8Chashcode%E6%96%B9%E6%B3%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88\">#</a> 重写HashMap的equal和hashcode方法需要注意什么？</h3><p>HashMap使用Key对象的hashCode()和equals方法去决定key-value对的索引。当我们试着从HashMap中获取值的时候，这些方法也会被用到。如果这些方法没有被正确地实现，在这种情况下，两个不同Key也许会产生相同的hashCode()和equals()输出，HashMap将会认为它们是相同的，然后覆盖它们，而非把它们存储到不同的地方。</p>\n<p>同样的，所有不允许存储重复数据的集合类都使用hashCode()和equals()去查找重复，所以正确实现它们非常重要。equals()和hashCode()的实现应该遵循以下规则：</p>\n<ul>\n<li>如果o1.equals(o2)，那么o1.hashCode() &#x3D;&#x3D; o2.hashCode()总是为true的。</li>\n<li>如果o1.hashCode() &#x3D;&#x3D; o2.hashCode()，并不意味着o1.equals(o2)会为true。</li>\n</ul>\n<h3 id=\"重写HashMap的equal方法不当会出现什么问题？\"><a href=\"#重写HashMap的equal方法不当会出现什么问题？\" class=\"headerlink\" title=\"# 重写HashMap的equal方法不当会出现什么问题？\"></a><a href=\"#%E9%87%8D%E5%86%99hashmap%E7%9A%84equal%E6%96%B9%E6%B3%95%E4%B8%8D%E5%BD%93%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98\">#</a> 重写HashMap的equal方法不当会出现什么问题？</h3><p>HashMap在比较元素时，会先通过hashCode进行比较，相同的情况下再通过equals进行比较。</p>\n<p>所以 equals相等的两个对象，hashCode一定相等。hashCode相等的两个对象，equals不一定相等（比如散列冲突的情况）</p>\n<p>重写了equals方法，不重写hashCode方法时，可能会出现equals方法返回为true，而hashCode方法却返回false，这样的一个后果会导致在hashmap等类中存储多个一模一样的对象，导致出现覆盖存储的数据的问题，这与hashmap只能有唯一的key的规范不符合。</p>\n<h3 id=\"列举HashMap在多线程下可能会出现的问题？\"><a href=\"#列举HashMap在多线程下可能会出现的问题？\" class=\"headerlink\" title=\"# 列举HashMap在多线程下可能会出现的问题？\"></a><a href=\"#%E5%88%97%E4%B8%BEhashmap%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98\">#</a> 列举HashMap在多线程下可能会出现的问题？</h3><ul>\n<li>JDK1.7中的 HashMap 使用头插法插入元素，在多线程的环境下，扩容的时候有可能导致环形链表的出现，形成死循环。因此，JDK1.8使用尾插法插入元素，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题。</li>\n<li>多线程同时执行 put 操作，如果计算出来的索引位置是相同的，那会造成前一个 key 被后一个 key 覆盖，从而导致元素的丢失。此问题在JDK 1.7和 JDK 1.8 中都存在。</li>\n</ul>\n<h3 id=\"HashMap的扩容机制介绍一下\"><a href=\"#HashMap的扩容机制介绍一下\" class=\"headerlink\" title=\"# HashMap的扩容机制介绍一下\"></a><a href=\"#hashmap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B\">#</a> HashMap的扩容机制介绍一下</h3><p>hashMap默认的负载因子是0.75，即如果hashmap中的元素个数超过了总容量75%，则会触发扩容，扩容分为两个步骤：</p>\n<ul>\n<li><strong>第1步</strong>是对哈希表长度的扩展（2倍）</li>\n<li><strong>第2步</strong>是将旧哈希表中的数据放到新的哈希表中。</li>\n</ul>\n<p>因为我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。</p>\n<p>如我们从16扩展为32时，具体的变化如下所示：</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1713514753772-9467a399-6b18-4a47-89d4-957adcc53cc0.webp\" alt=\"img\"></p>\n<p>因此元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1713514753786-cdca10bf-6eda-47f9-9bbe-0cc3beb67d76.webp\" alt=\"img\"></p>\n<p>因此，我们在扩充HashMap的时候，不需要重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”。可以看看下图为16扩充为32的resize示意图：</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1713514753885-d1529537-322c-49b1-beec-5d9953da5150.webp\" alt=\"img\"></p>\n<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。</p>\n<h3 id=\"HashMap的大小为什么是2的n次方大小呢？\"><a href=\"#HashMap的大小为什么是2的n次方大小呢？\" class=\"headerlink\" title=\"# HashMap的大小为什么是2的n次方大小呢？\"></a><a href=\"#hashmap%E7%9A%84%E5%A4%A7%E5%B0%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF2%E7%9A%84n%E6%AC%A1%E6%96%B9%E5%A4%A7%E5%B0%8F%E5%91%A2\">#</a> HashMap的大小为什么是2的n次方大小呢？</h3><p>在 JDK1.7 中，HashMap 整个扩容过程就是分别取出数组元素，一般该元素是最后一个放入链表中的元素，然后遍历以该元素为头的单向链表元素，依据每个被遍历元素的 hash 值计算其在新数组中的下标，然后进行交换。这样的扩容方式会将原来哈希冲突的单向链表尾部变成扩容后单向链表的头部。</p>\n<p>而在 JDK 1.8 中，HashMap 对扩容操作做了优化。由于扩容数组的长度是 2 倍关系，所以对于假设初始 tableSize &#x3D; 4 要扩容到 8 来说就是 0100 到 1000 的变化（左移一位就是 2 倍），在扩容中只用判断原来的 hash 值和左移动的一位（newtable 的值）按位与操作是 0 或 1 就行，0 的话索引不变，1 的话索引变成原索引加上扩容前数组。</p>\n<p>之所以能通过这种“与运算“来重新分配索引，是因为 hash 值本来就是随机的，而 hash 按位与上 newTable 得到的 0（扩容前的索引位置）和 1（扩容前索引位置加上扩容前数组长度的数值索引处）就是随机的，所以扩容的过程就能把之前哈希冲突的元素再随机分布到不同的索引中去。</p>\n<h3 id=\"往hashmap存20个元素，会扩容几次？\"><a href=\"#往hashmap存20个元素，会扩容几次？\" class=\"headerlink\" title=\"# 往hashmap存20个元素，会扩容几次？\"></a><a href=\"#%E5%BE%80hashmap%E5%AD%9820%E4%B8%AA%E5%85%83%E7%B4%A0-%E4%BC%9A%E6%89%A9%E5%AE%B9%E5%87%A0%E6%AC%A1\">#</a> 往hashmap存20个元素，会扩容几次？</h3><p>当插入 20 个元素时，HashMap 的扩容过程如下：</p>\n<p><strong>初始容量</strong>：16</p>\n<ul>\n<li>插入第 1 到第 12 个元素时，不需要扩容。</li>\n<li>插入第 13 个元素时，达到负载因子限制，需要扩容。此时，HashMap 的容量从 16 扩容到 32。</li>\n</ul>\n<p><strong>扩容后的容量</strong>：32</p>\n<ul>\n<li>插入第 14 到第 24 个元素时，不需要扩容。</li>\n</ul>\n<p>因此，总共会进行一次扩容。</p>\n<h3 id=\"说说hashmap的负载因子\"><a href=\"#说说hashmap的负载因子\" class=\"headerlink\" title=\"# 说说hashmap的负载因子\"></a><a href=\"#%E8%AF%B4%E8%AF%B4hashmap%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9B%A0%E5%AD%90\">#</a> 说说hashmap的负载因子</h3><p>HashMap 负载因子 loadFactor 的默认值是 0.75，当 HashMap 中的元素个数超过了容量的 75% 时，就会进行扩容。</p>\n<p>默认负载因子为 0.75，是因为它提供了空间和时间复杂度之间的良好平衡。</p>\n<p>负载因子太低会导致大量的空桶浪费空间，负载因子太高会导致大量的碰撞，降低性能。0.75 的负载因子在这两个因素之间取得了良好的平衡。</p>\n<h3 id=\"Hashmap和Hashtable有什么不一样的？Hashmap一般怎么用？\"><a href=\"#Hashmap和Hashtable有什么不一样的？Hashmap一般怎么用？\" class=\"headerlink\" title=\"# Hashmap和Hashtable有什么不一样的？Hashmap一般怎么用？\"></a><a href=\"#hashmap%E5%92%8Chashtable%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84-hashmap%E4%B8%80%E8%88%AC%E6%80%8E%E4%B9%88%E7%94%A8\">#</a> Hashmap和Hashtable有什么不一样的？Hashmap一般怎么用？</h3><ul>\n<li><strong>HashMap线程不安全</strong>，效率高一点，可以存储null的key和value，null的key只能有一个，null的value可以有多个。默认初始容量为16，每次扩充变为原来2倍。创建时如果给定了初始容量，则扩充为2的幂次方大小。底层数据结构为数组+链表，插入元素后如果链表长度大于阈值（默认为8），先判断数组长度是否小于64，如果小于，则扩充数组，反之将链表转化为红黑树，以减少搜索时间。</li>\n<li><strong>HashTable线程安全</strong>，效率低一点，其内部方法基本都经过synchronized修饰，不可以有null的key和value。默认初始容量为11，每次扩容变为原来的2n+1。创建时给定了初始容量，会直接用给定的大小。底层数据结构为数组+链表。它基本被淘汰了，要保证线程安全可以用ConcurrentHashMap。</li>\n<li><strong>怎么用</strong>：HashMap主要用来存储键值对，可以调用put方法向其中加入元素，调用get方法获取某个键对应的值，也可以通过containsKey方法查看某个键是否存在等</li>\n</ul>\n<h3 id=\"ConcurrentHashMap怎么实现的？\"><a href=\"#ConcurrentHashMap怎么实现的？\" class=\"headerlink\" title=\"# ConcurrentHashMap怎么实现的？\"></a><a href=\"#concurrenthashmap%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84\">#</a> ConcurrentHashMap怎么实现的？</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>JDK 1.7 ConcurrentHashMap</p></blockquote>\n<p>在 JDK 1.7 中它使用的是数组加链表的形式实现的，而数组又分为：大数组 Segment 和小数组 HashEntry。 Segment 是一种可重入锁（ReentrantLock），在 ConcurrentHashMap 里扮演锁的角色；HashEntry 则用于存储键值对数据。一个 ConcurrentHashMap 里包含一个 Segment 数组，一个 Segment 里包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1721807523151-41ad316a-6264-48e8-9704-5b362bc0083c.webp\"></p>\n<p>JDK 1.7 ConcurrentHashMap 分段锁技术将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>JDK 1.8 ConcurrentHashMap</p></blockquote>\n<p>在 JDK 1.7 中，ConcurrentHashMap 虽然是线程安全的，但因为它的底层实现是数组 + 链表的形式，所以在数据比较多的情况下访问是很慢的，因为要遍历整个链表，而 JDK 1.8 则使用了数组 + 链表&#x2F;红黑树的方式优化了 ConcurrentHashMap 的实现，具体实现结构如下：</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1721807523128-7b1419e7-e6ba-47e6-aba0-8b29423a8ce7.webp\"></p>\n<p>JDK 1.8 ConcurrentHashMap JDK 1.8 ConcurrentHashMap 主要通过 volatile + CAS 或者 synchronized 来实现的线程安全的。添加元素时首先会判断容器是否为空：</p>\n<ul>\n<li>如果为空则使用 volatile 加 CAS 来初始化</li>\n<li>如果容器不为空，则根据存储的元素计算该位置是否为空。<ul>\n<li>如果根据存储的元素计算结果为空，则利用 CAS 设置该节点；</li>\n<li>如果根据存储的元素计算结果不为空，则使用 synchronized ，然后，遍历桶中的数据，并替换或新增节点到桶中，最后再判断是否需要转为红黑树，这样就能保证并发访问时的线程安全了。</li>\n</ul>\n</li>\n</ul>\n<p>如果把上面的执行用一句话归纳的话，就相当于是ConcurrentHashMap通过对头结点加锁来保证线程安全的，锁的粒度相比 Segment 来说更小了，发生冲突和加锁的频率降低了，并发操作的性能就提高了。</p>\n<p>而且 JDK 1.8 使用的是红黑树优化了之前的固定链表，那么当数据量比较大的时候，查询性能也得到了很大的提升，从之前的 O(n) 优化到了 O(logn) 的时间复杂度。</p>\n<h3 id=\"分段锁怎么加锁的？\"><a href=\"#分段锁怎么加锁的？\" class=\"headerlink\" title=\"# 分段锁怎么加锁的？\"></a><a href=\"#%E5%88%86%E6%AE%B5%E9%94%81%E6%80%8E%E4%B9%88%E5%8A%A0%E9%94%81%E7%9A%84\">#</a> 分段锁怎么加锁的？</h3><p>在 ConcurrentHashMap 中，将整个数据结构分为多个 Segment，每个 Segment 都类似于一个小的 HashMap，每个 Segment 都有自己的锁，不同 Segment 之间的操作互不影响，从而提高并发性能。</p>\n<p>在 ConcurrentHashMap 中，对于插入、更新、删除等操作，需要先定位到具体的 Segment，然后再在该 Segment 上加锁，而不是像传统的 HashMap 一样对整个数据结构加锁。这样可以使得不同 Segment 之间的操作并行进行，提高了并发性能。</p>\n<h3 id=\"分段锁是可重入的吗？\"><a href=\"#分段锁是可重入的吗？\" class=\"headerlink\" title=\"# 分段锁是可重入的吗？\"></a><a href=\"#%E5%88%86%E6%AE%B5%E9%94%81%E6%98%AF%E5%8F%AF%E9%87%8D%E5%85%A5%E7%9A%84%E5%90%97\">#</a> 分段锁是可重入的吗？</h3><p>JDK 1.7 ConcurrentHashMap中的分段锁是用了 ReentrantLock，是一个可重入的锁。</p>\n<h3 id=\"已经用了synchronized，为什么还要用CAS呢？\"><a href=\"#已经用了synchronized，为什么还要用CAS呢？\" class=\"headerlink\" title=\"# 已经用了synchronized，为什么还要用CAS呢？\"></a><a href=\"#%E5%B7%B2%E7%BB%8F%E7%94%A8%E4%BA%86synchronized-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E7%94%A8cas%E5%91%A2\">#</a> 已经用了synchronized，为什么还要用CAS呢？</h3><p>ConcurrentHashMap使用这两种手段来保证线程安全主要是一种权衡的考虑，在某些操作中使用synchronized，还是使用CAS，主要是根据锁竞争程度来判断的。</p>\n<p>比如：在putVal中，如果计算出来的hash槽没有存放元素，那么就可以直接使用CAS来进行设置值，这是因为在设置元素的时候，因为hash值经过了各种扰动后，造成hash碰撞的几率较低，那么我们可以预测使用较少的自旋来完成具体的hash落槽操作。</p>\n<p>当发生了hash碰撞的时候说明容量不够用了或者已经有大量线程访问了，因此这时候使用synchronized来处理hash碰撞比CAS效率要高，因为发生了hash碰撞大概率来说是线程竞争比较强烈。</p>\n<h3 id=\"ConcurrentHashMap用了悲观锁还是乐观锁\"><a href=\"#ConcurrentHashMap用了悲观锁还是乐观锁\" class=\"headerlink\" title=\"# ConcurrentHashMap用了悲观锁还是乐观锁?\"></a><a href=\"#concurrenthashmap%E7%94%A8%E4%BA%86%E6%82%B2%E8%A7%82%E9%94%81%E8%BF%98%E6%98%AF%E4%B9%90%E8%A7%82%E9%94%81\">#</a> ConcurrentHashMap用了悲观锁还是乐观锁?</h3><p>悲观锁和乐观锁都有用到。</p>\n<p>添加元素时首先会判断容器是否为空：</p>\n<ul>\n<li><p>如果为空则使用 volatile 加 <strong>CAS （乐观锁）</strong> 来初始化。</p>\n</li>\n<li><p>如果容器不为空，则根据存储的元素计算该位置是否为空。</p>\n</li>\n<li><p>如果根据存储的元素计算结果为空，则利用 <strong>CAS（乐观锁）</strong> 设置该节点；</p>\n</li>\n<li><p>如果根据存储的元素计算结果不为空，则使用 <strong>synchronized（悲观锁）</strong> ，然后，遍历桶中的数据，并替换或新增节点到桶中，最后再判断是否需要转为红黑树，这样就能保证并发访问时的线程安全了。</p>\n</li>\n</ul>\n<h3 id=\"HashTable-底层实现原理是什么？\"><a href=\"#HashTable-底层实现原理是什么？\" class=\"headerlink\" title=\"# HashTable 底层实现原理是什么？\"></a><a href=\"#hashtable-%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88\">#</a> HashTable 底层实现原理是什么？</h3><p><img src=\"https://cdn.xiaolincoding.com//picgo/1719982934770-8587cb0a-6e1d-4007-9a22-bc1e41276491.png\" alt=\"img\"></p>\n<ul>\n<li>Hashtable的底层数据结构主要是<strong>数组加上链表</strong>，数组是主体，链表是解决hash冲突存在的。</li>\n<li>HashTable是线程安全的，实现方式是<strong>Hashtable的所有公共方法均采用synchronized关键字</strong>，当一个线程访问同步方法，另一个线程也访问的时候，就会陷入阻塞或者轮询的状态。</li>\n</ul>\n<h3 id=\"HashTable线程安全是怎么实现的？\"><a href=\"#HashTable线程安全是怎么实现的？\" class=\"headerlink\" title=\"# HashTable线程安全是怎么实现的？\"></a><a href=\"#hashtable%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84\">#</a> HashTable线程安全是怎么实现的？</h3><p>因为它的put，get做成了同步方法，保证了Hashtable的线程安全性，每个操作数据的方法都进行同步控制之后，由此带来的问题任何一个时刻<strong>只能有一个线程可以操纵Hashtable，所以其效率比较低</strong>。</p>\n<p>Hashtable 的 put(K key, V value) 和 get(Object key) 方法的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// Make sure the value is not null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">// Makes sure the key is not already in the hashtable.</span></span><br><span class=\"line\">Entry&lt;?,?&gt; tab[] = table;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> key.hashCode();</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> (hash &amp; <span class=\"number\">0x7FFFFFFF</span>) % tab.length;</span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(; entry != <span class=\"literal\">null</span> ; entry = entry.next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class=\"line\">        <span class=\"type\">V</span> <span class=\"variable\">old</span> <span class=\"operator\">=</span> entry.value;</span><br><span class=\"line\">        entry.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> old;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> addEntry(hash, key, value, index);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> V <span class=\"title function_\">get</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\">Entry&lt;?,?&gt; tab[] = table;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> key.hashCode();</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> (hash &amp; <span class=\"number\">0x7FFFFFFF</span>) % tab.length;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class=\"literal\">null</span> ; e = e.next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (V)e.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<strong>Hashtable是通过使用了 synchronized 关键字来保证其线程安全</strong>。</p>\n<p>在Java中，可以使用synchronized关键字来标记一个方法或者代码块，当某个线程调用该对象的synchronized方法或者访问synchronized代码块时，这个线程便获得了该对象的锁，其他线程暂时无法访问这个方法，只有等待这个方法执行完毕或者代码块执行完毕，这个线程才会释放该对象的锁，其他线程才能执行这个方法或者代码块。</p>\n<h3 id=\"hashtable-和concurrentHashMap有什么区别\"><a href=\"#hashtable-和concurrentHashMap有什么区别\" class=\"headerlink\" title=\"# hashtable 和concurrentHashMap有什么区别\"></a><a href=\"#hashtable-%E5%92%8Cconcurrenthashmap%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\">#</a> hashtable 和concurrentHashMap有什么区别</h3><p><strong>底层数据结构：</strong></p>\n<ul>\n<li>jdk7之前的ConcurrentHashMap底层采用的是<strong>分段的数组+链表</strong>实现，jdk8之后采用的是<strong>数组+链表&#x2F;红黑树；</strong></li>\n<li>HashTable采用的是<strong>数组+链表</strong>，数组是主体，链表是解决hash冲突存在的。</li>\n</ul>\n<p><strong>实现线程安全的方式：</strong></p>\n<ul>\n<li>jdk8以前，ConcurrentHashMap采用分段锁，对整个数组进行了分段分割，每一把锁只锁容器里的一部分数据，多线程访问不同数据段里的数据，就不会存在锁竞争，提高了并发访问；jdk8以后，直接采用数组+链表&#x2F;红黑树，并发控制使用CAS和synchronized操作，更加提高了速度。</li>\n<li>HashTable：所有的方法都加了锁来保证线程安全，但是效率非常的低下，当一个线程访问同步方法，另一个线程也访问的时候，就会陷入阻塞或者轮询的状态。</li>\n</ul>\n<h3 id=\"说一下HashMap和Hashtable、ConcurrentMap的区别\"><a href=\"#说一下HashMap和Hashtable、ConcurrentMap的区别\" class=\"headerlink\" title=\"# 说一下HashMap和Hashtable、ConcurrentMap的区别\"></a><a href=\"#%E8%AF%B4%E4%B8%80%E4%B8%8Bhashmap%E5%92%8Chashtable%E3%80%81concurrentmap%E7%9A%84%E5%8C%BA%E5%88%AB\">#</a> 说一下HashMap和Hashtable、ConcurrentMap的区别</h3><ul>\n<li>HashMap线程不安全，效率高一点，可以存储null的key和value，null的key只能有一个，null的value可以有多个。默认初始容量为16，每次扩充变为原来2倍。创建时如果给定了初始容量，则扩充为2的幂次方大小。底层数据结构为数组+链表，插入元素后如果链表长度大于阈值（默认为8），先判断数组长度是否小于64，如果小于，则扩充数组，反之将链表转化为红黑树，以减少搜索时间。</li>\n<li>HashTable线程安全，效率低一点，其内部方法基本都经过synchronized修饰，不可以有null的key和value。默认初始容量为11，每次扩容变为原来的2n+1。创建时给定了初始容量，会直接用给定的大小。底层数据结构为数组+链表。它基本被淘汰了，要保证线程安全可以用ConcurrentHashMap。</li>\n<li>ConcurrentHashMap是Java中的一个线程安全的哈希表实现，它可以在多线程环境下并发地进行读写操作，而不需要像传统的HashTable那样在读写时加锁。ConcurrentHashMap的实现原理主要基于分段锁和CAS操作。它将整个哈希表分成了多Segment（段），每个Segment都类似于一个小的HashMap，它拥有自己的数组和一个独立的锁。在ConcurrentHashMap中，读操作不需要锁，可以直接对Segment进行读取，而写操作则只需要锁定对应的Segment，而不是整个哈希表，这样可以大大提高并发性能。</li>\n</ul>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"# Set\"></a><a href=\"#set\">#</a> Set</h2><h3 id=\"Set集合有什么特点？如何实现key无重复的？\"><a href=\"#Set集合有什么特点？如何实现key无重复的？\" class=\"headerlink\" title=\"# Set集合有什么特点？如何实现key无重复的？\"></a><a href=\"#set%E9%9B%86%E5%90%88%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0key%E6%97%A0%E9%87%8D%E5%A4%8D%E7%9A%84\">#</a> Set集合有什么特点？如何实现key无重复的？</h3><ul>\n<li><strong>set集合特点</strong>：Set集合中的元素是唯一的，不会出现重复的元素。</li>\n<li><strong>set实现原理</strong>：Set集合通过内部的数据结构（如哈希表、红黑树等）来实现key的无重复。当向Set集合中插入元素时，会先根据元素的hashCode值来确定元素的存储位置，然后再通过equals方法来判断是否已经存在相同的元素，如果存在则不会再次插入，保证了元素的唯一性。</li>\n</ul>\n<h3 id=\"有序的Set是什么？记录插入顺序的集合是什么？\"><a href=\"#有序的Set是什么？记录插入顺序的集合是什么？\" class=\"headerlink\" title=\"# 有序的Set是什么？记录插入顺序的集合是什么？\"></a><a href=\"#%E6%9C%89%E5%BA%8F%E7%9A%84set%E6%98%AF%E4%BB%80%E4%B9%88-%E8%AE%B0%E5%BD%95%E6%8F%92%E5%85%A5%E9%A1%BA%E5%BA%8F%E7%9A%84%E9%9B%86%E5%90%88%E6%98%AF%E4%BB%80%E4%B9%88\">#</a> 有序的Set是什么？记录插入顺序的集合是什么？</h3><ul>\n<li><strong>有序的 Set 是TreeSet和LinkedHashSet</strong>。TreeSet是基于红黑树实现，保证元素的自然顺序。LinkedHashSet是基于双重链表和哈希表的结合来实现元素的有序存储，保证元素添加的自然顺序</li>\n<li><strong>记录插入顺序的集合通常指的是LinkedHashSet</strong>，它不仅保证元素的唯一性，还可以保持元素的插入顺序。当需要在Set集合中记录元素的插入顺序时，可以选择使用LinkedHashSet来实现。</li>\n</ul>\n<hr>\n","text":"# Java集合# 概念# 数组与集合区别，用过哪些？数组和集合的区别： 数组是固定长度的数据结构，一旦创建长度就无法改变，而集合是动态长度的数据结构，可以根据...","permalink":"/post/java集合/Java集合面试题","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"八股","slug":"八股","count":22,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"},{"name":"精选","slug":"精选","count":10,"path":"api/tags/精选.json"},{"name":"java集合","slug":"java集合","count":1,"path":"api/tags/java集合.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E9%9B%86%E5%90%88\"><span class=\"toc-text\"> Java集合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\"> 概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E4%B8%8E%E9%9B%86%E5%90%88%E5%8C%BA%E5%88%AB%EF%BC%8C%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\"> 数组与集合区别，用过哪些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E8%AF%B4Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%EF%BC%9F\"><span class=\"toc-text\"> 说说Java中的集合？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\"> Java中的线程安全的集合是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Collections%E5%92%8CCollection%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\"> Collections和Collection的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\"> 集合遍历的方法有哪些？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#List\"><span class=\"toc-text\"> List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%B2%E4%B8%80%E4%B8%8Bjava%E9%87%8C%E9%9D%A2list%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F\"><span class=\"toc-text\"> 讲一下java里面list的几种实现，几种实现有什么不同？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Arraylist%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%93%AA%E4%B8%AA%E9%9B%86%E5%90%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\"> Arraylist和LinkedList的区别，哪个集合是线程安全的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ArrayList%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F%E6%8A%8AArrayList%E5%8F%98%E6%88%90%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\"> ArrayList线程安全吗？把ArrayList变成线程安全有哪些方法？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88ArrayList%E4%B8%8D%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%8C%E5%85%B7%E4%BD%93%E6%9D%A5%E8%AF%B4%E6%98%AF%E5%93%AA%E9%87%8C%E4%B8%8D%E5%AE%89%E5%85%A8%EF%BC%9F\"><span class=\"toc-text\"> 为什么ArrayList不是线程安全的，具体来说是哪里不安全？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ArrayList-%E5%92%8C-LinkedList-%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F\"><span class=\"toc-text\"> ArrayList 和 LinkedList 的应用场景？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ArrayList%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6%E8%AF%B4%E4%B8%80%E4%B8%8B\"><span class=\"toc-text\"> ArrayList的扩容机制说一下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84-List%EF%BC%8C-CopyonWriteArraylist%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84\"><span class=\"toc-text\"> 线程安全的 List， CopyonWriteArraylist是如何实现线程安全的</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Map\"><span class=\"toc-text\"> Map</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%EF%BC%9F\"><span class=\"toc-text\"> HashMap实现原理介绍一下？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3%E7%9A%84%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\"> 了解的哈希冲突解决方法有哪些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97%EF%BC%9F\"><span class=\"toc-text\"> HashMap是线程安全的吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hashmap%E7%9A%84put%E8%BF%87%E7%A8%8B%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B\"><span class=\"toc-text\"> hashmap的put过程介绍一下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap%E7%9A%84put-key-val-%E5%92%8Cget-key-%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\"> HashMap的put(key,val)和get(key)过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hashmap-%E8%B0%83%E7%94%A8get%E6%96%B9%E6%B3%95%E4%B8%80%E5%AE%9A%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F\"><span class=\"toc-text\"> hashmap 调用get方法一定安全吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap%E4%B8%80%E8%88%AC%E7%94%A8%E4%BB%80%E4%B9%88%E5%81%9AKey%EF%BC%9F%E4%B8%BA%E5%95%A5String%E9%80%82%E5%90%88%E5%81%9AKey%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\"> HashMap一般用什么做Key？为啥String适合做Key呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88HashMap%E8%A6%81%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91%E8%80%8C%E4%B8%8D%E6%98%AF%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%9F\"><span class=\"toc-text\"> 为什么HashMap要用红黑树而不是平衡二叉树？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hashmap-key%E5%8F%AF%E4%BB%A5%E4%B8%BAnull%E5%90%97%EF%BC%9F\"><span class=\"toc-text\"> hashmap key可以为null吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99HashMap%E7%9A%84equal%E5%92%8Chashcode%E6%96%B9%E6%B3%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\"> 重写HashMap的equal和hashcode方法需要注意什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99HashMap%E7%9A%84equal%E6%96%B9%E6%B3%95%E4%B8%8D%E5%BD%93%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\"> 重写HashMap的equal方法不当会出现什么问题？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E4%B8%BEHashMap%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\"> 列举HashMap在多线程下可能会出现的问题？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B\"><span class=\"toc-text\"> HashMap的扩容机制介绍一下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap%E7%9A%84%E5%A4%A7%E5%B0%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF2%E7%9A%84n%E6%AC%A1%E6%96%B9%E5%A4%A7%E5%B0%8F%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\"> HashMap的大小为什么是2的n次方大小呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%80hashmap%E5%AD%9820%E4%B8%AA%E5%85%83%E7%B4%A0%EF%BC%8C%E4%BC%9A%E6%89%A9%E5%AE%B9%E5%87%A0%E6%AC%A1%EF%BC%9F\"><span class=\"toc-text\"> 往hashmap存20个元素，会扩容几次？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E8%AF%B4hashmap%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9B%A0%E5%AD%90\"><span class=\"toc-text\"> 说说hashmap的负载因子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hashmap%E5%92%8CHashtable%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%EF%BC%9FHashmap%E4%B8%80%E8%88%AC%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\"> Hashmap和Hashtable有什么不一样的？Hashmap一般怎么用？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ConcurrentHashMap%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\"> ConcurrentHashMap怎么实现的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%AE%B5%E9%94%81%E6%80%8E%E4%B9%88%E5%8A%A0%E9%94%81%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\"> 分段锁怎么加锁的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%AE%B5%E9%94%81%E6%98%AF%E5%8F%AF%E9%87%8D%E5%85%A5%E7%9A%84%E5%90%97%EF%BC%9F\"><span class=\"toc-text\"> 分段锁是可重入的吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%B2%E7%BB%8F%E7%94%A8%E4%BA%86synchronized%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E7%94%A8CAS%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\"> 已经用了synchronized，为什么还要用CAS呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ConcurrentHashMap%E7%94%A8%E4%BA%86%E6%82%B2%E8%A7%82%E9%94%81%E8%BF%98%E6%98%AF%E4%B9%90%E8%A7%82%E9%94%81\"><span class=\"toc-text\"> ConcurrentHashMap用了悲观锁还是乐观锁?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashTable-%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\"> HashTable 底层实现原理是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashTable%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\"> HashTable线程安全是怎么实现的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hashtable-%E5%92%8CconcurrentHashMap%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\"> hashtable 和concurrentHashMap有什么区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E4%B8%80%E4%B8%8BHashMap%E5%92%8CHashtable%E3%80%81ConcurrentMap%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\"> 说一下HashMap和Hashtable、ConcurrentMap的区别</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Set\"><span class=\"toc-text\"> Set</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Set%E9%9B%86%E5%90%88%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0key%E6%97%A0%E9%87%8D%E5%A4%8D%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\"> Set集合有什么特点？如何实现key无重复的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%BA%8F%E7%9A%84Set%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E8%AE%B0%E5%BD%95%E6%8F%92%E5%85%A5%E9%A1%BA%E5%BA%8F%E7%9A%84%E9%9B%86%E5%90%88%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\"> 有序的Set是什么？记录插入顺序的集合是什么？</span></a></li></ol></li></ol>","author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/325730313"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"jvm","uid":"564790740ba698a5ef60f23f00c2b931","slug":"jvm/jvm面试题","date":"2024-12-03T18:00:59.000Z","updated":"2024-12-07T10:36:12.426Z","comments":true,"path":"api/articles/jvm/jvm面试题.json","keywords":null,"cover":"https://i.pinimg.com/474x/82/a9/c7/82a9c7eed0840d8391ba8f3a2baed746.jpg","text":"# Java虚拟机# 内存模型# JVM的内存模型介绍一下根据 JVM8 规范，JVM 运行时内存共分为虚拟机栈、堆、元空间、程序计数器、本地方法栈五个部分。还...","permalink":"/post/jvm/jvm面试题","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"八股","slug":"八股","count":22,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"},{"name":"精选","slug":"精选","count":10,"path":"api/tags/精选.json"},{"name":"jvm","slug":"jvm","count":1,"path":"api/tags/jvm.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/325730313"}}}}},"next_post":{"title":"并发上","uid":"fc6088a2cdd600ff4c6d74daed64c2a4","slug":"并发/并发常见面试题（上）","date":"2024-12-03T17:21:45.000Z","updated":"2024-12-07T10:31:41.008Z","comments":true,"path":"api/articles/并发/并发常见面试题（上）.json","keywords":null,"cover":"https://i.pinimg.com/474x/e6/a7/ae/e6a7ae0bb18e3c4331d7315ba0d18c8e.jpg","text":"# Java并发编程# 多线程# java里面的线程和操作系统的线程一样吗？Java 底层会调用 pthread_create 来创建线程，所以本质上 java...","permalink":"/post/并发/并发常见面试题（上）","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"八股","slug":"八股","count":22,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"},{"name":"并发框架","slug":"并发框架","count":7,"path":"api/tags/并发框架.json"},{"name":"精选","slug":"精选","count":10,"path":"api/tags/精选.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/325730313"}}}}}}