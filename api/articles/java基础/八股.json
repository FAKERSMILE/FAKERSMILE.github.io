{"title":"JDK8有哪些新特性？","uid":"e53aef447e609f6346cd88030af73ac8","slug":"java基础/八股","date":"2024-11-13T04:14:48.000Z","updated":"2024-12-03T13:27:58.509Z","comments":true,"path":"api/articles/java基础/八股.json","keywords":null,"cover":"https://i.pinimg.com/474x/d0/90/c2/d090c22fd068fb7bac8cb9f7b172043e.jpg","content":"<p>JDK8较为重要和平日里经常被问的特性如下：</p>\n<h2 id=\"1-用元空间替代了永久代\"><a href=\"#1-用元空间替代了永久代\" class=\"headerlink\" title=\"1)用元空间替代了永久代\"></a>1)用元空间替代了永久代</h2><p>因为JDK8要把JRockit虚拟机和Hotspot虚拟机融合，而JRockit<br>没有永久代，所以把Hotspot永久代给去了（本质也是永久代回收效率<br>太低)</p>\n<h2 id=\"2-引入了Lambda表达式\"><a href=\"#2-引入了Lambda表达式\" class=\"headerlink\" title=\"2)引入了Lambda表达式\"></a>2)引入了Lambda表达式</h2><p>Lambda表达式是Java8中引入的一个重要特性，它允许我们以更简洁和<br>灵活的方式编写代码。Lambda表达式可以看作是匿名函数，它没有<br>方法名，但可以包含参数和函数体。Lambda表达式可以用于简化<br>代码，提高代码的可读性和可维护性。<br>Lambda表达式的基本语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parameters) -&gt; expression</span><br><span class=\"line\">或</span><br><span class=\"line\">(parameters) -&gt; &#123; statements; &#125;</span><br></pre></td></tr></table></figure>\n<p>其中，parameters是参数列表，expression是函数体，statements是<br>函数体的多条语句。Lambda表达式可以用于替换匿名内部类，使代码<br>更加简洁和易读。<br>例如，我们可以使用Lambda表达式来简化以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">Collections.sort(list, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String s1, String s2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s1.compareTo(s2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用Lambda表达式可以简化为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">Collections.sort(list, (s1, s2) -&gt; s1.compareTo(s2));</span><br></pre></td></tr></table></figure>\n<p>Lambda表达式还可以用于简化其他场景，例如线程的创建、集合的遍历等。</p>\n<h2 id=\"3-引入了日期类、接口默认方法、静态方法\"><a href=\"#3-引入了日期类、接口默认方法、静态方法\" class=\"headerlink\" title=\"3)引入了日期类、接口默认方法、静态方法\"></a>3)引入了日期类、接口默认方法、静态方法</h2><p>Java8引入了新的日期和时间APl(位于java.time包中)，它们更加<br>简洁和易于使用，解决了旧版日期时间AP!的许多问题。<br><br>例如<br>Date<br>Calendar<br>都是可变类且线程不安全。而新的日期类都是<br>不可变的，一旦创建就不能修改，这样可以避免意外的修改，提升代码<br>的安全性和可维护性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span>LocalDate.now();</span><br><span class=\"line\"><span class=\"type\">LocalTime</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span>LocalTime.now();</span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span>LocalDateTime.now()</span><br></pre></td></tr></table></figure>\n<p>Date<br>本身不包含时区信息，必须使用<br>Calendar<br>类来处理时区，但使<br>用起来非常复杂且容易出错。<br><br>新API提供了专门的时区类（如<br>ZonedDateTime,OffsetDateTime<br>ZoneId<br>等)，简化了时区处理，并且这些类的方法更加直观和易用。</p>\n<h2 id=\"接口默认方法、静态\"><a href=\"#接口默认方法、静态\" class=\"headerlink\" title=\"接口默认方法、静态\"></a>接口默认方法、静态</h2><p>默认方法允许在接口中定义方法的默认实现，这样接口的实现类不需要<br>再实现这些方法。之所以提供静态方法，是为了将相关的方法内聚在接<br>口中，而不必创建新的对象。</p>\n<h2 id=\"4-新增Stream流式接口\"><a href=\"#4-新增Stream流式接口\" class=\"headerlink\" title=\"4)新增Stream流式接口\"></a>4)新增Stream流式接口</h2><p>Stream API是Java8中引入的一个新特性，它提供了一种新的方式来处理数据集合。Stream API允许我们以声明式的方式处理数据，避免了传统的循环和条件语句，使代码更加简洁和易读。<br>Stream API的基本语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;T&gt; stream = collection.stream();</span><br></pre></td></tr></table></figure>\n<p>其中，collection是一个数据集合，可以是List、Set、Map等。stream是一个Stream对象，它表示一个数据流，可以通过一系列的操作来处理数据。<br>Stream API提供了一系列的操作，包括过滤、映射、排序、聚合等。这些操作可以链式调用，使代码更加简洁和易读。<br>例如，我们可以使用Stream API来过滤一个List中的偶数，并计算它们的和：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> list.stream()</span><br><span class=\"line\">    .filter(n -&gt; n % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">    .mapToInt(Integer::intValue)</span><br><span class=\"line\">    .sum();</span><br><span class=\"line\">System.out.println(sum); <span class=\"comment\">// 输出：12</span></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们首先将List转换为一个Stream对象，然后使用filter操作过滤出偶数，再使用mapToInt操作将Stream中的元素转换为int类型，最后使用sum操作计算它们的和。整个操作链式调用，使代码更加简洁和易读。<br>Stream API还提供了一些其他的操作，例如reduce、collect、forEach等，可以满足各种数据处理的需求。通过使用Stream API，我们可以更加高效地处理数据集合，使代码更加简洁和易读。</p>\n<h2 id=\"5-引入Optional类\"><a href=\"#5-引入Optional类\" class=\"headerlink\" title=\"5)引入Optional类\"></a>5)引入Optional类</h2><p>Optional<br>是Java8引入的一个容器类，用于表示可能为空的值。它<br>通过提供更为清晰的AP!,来减少程序中出现<br>nu11的情况，避免<br>NullPointerException<br>(空指针异常)的发生。<br><br>Optional<br>可以包含一个值，也可以为空，从而表示“值存在”或“值不存<br>在”这两种状态。<br><br><strong>作用</strong>：</p>\n<ul>\n<li>减少NullPointerException:<br><br>通过<code>Optional</code>提供的操作方法，避免 直接使用 <code>null</code>进行空值检查，从而降低空指针异常的风险。<br></li>\n<li>提高代码可读性：<br><br>Optional 提供了一套简洁的API,例如<code>isPresent()</code> <code>ifPresent()</code>和<code>orElse()</code>，可以让代码更具表达性，清晰地展示处理空值的逻辑<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; optional = Optional.of(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (optional.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(optional.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"6-新增了CompletableFuture、StampedLock等并发实现类。\"><a href=\"#6-新增了CompletableFuture、StampedLock等并发实现类。\" class=\"headerlink\" title=\"6)新增了CompletableFuture、StampedLock等并发实现类。\"></a>6)新增了CompletableFuture、StampedLock等并发实现类。</h2><p>CompletableFuture提供了一个新的异步编程模型，简化了异步任务的<br>编写和管理。<br>StampedLock是一个新的读写锁实现，它提供了一种新的方式来处理读写锁，避免了复杂的锁机制和锁竞争。</p>\n<p>如果你对HashMap、ConcurrentHashMap面试题有准备的话，这时候<br>也可以抛出来，引导面试官来询问。比如：Java8修改了HashMap和<br>ConcurrentHashMap的实现。</p>\n<br/>\n","text":"JDK8较为重要和平日里经常被问的特性如下： 1)用元空间替代了永久代因为JDK8要把JRockit虚拟机和Hotspot虚拟机融合，而JRockit没有永久代...","permalink":"/post/java基础/八股","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"八股","slug":"八股","count":14,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":12,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%94%A8%E5%85%83%E7%A9%BA%E9%97%B4%E6%9B%BF%E4%BB%A3%E4%BA%86%E6%B0%B8%E4%B9%85%E4%BB%A3\"><span class=\"toc-text\">1)用元空间替代了永久代</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E5%85%A5%E4%BA%86Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">2)引入了Lambda表达式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%BC%95%E5%85%A5%E4%BA%86%E6%97%A5%E6%9C%9F%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95%E3%80%81%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3)引入了日期类、接口默认方法、静态方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95%E3%80%81%E9%9D%99%E6%80%81\"><span class=\"toc-text\">接口默认方法、静态</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%96%B0%E5%A2%9EStream%E6%B5%81%E5%BC%8F%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">4)新增Stream流式接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%BC%95%E5%85%A5Optional%E7%B1%BB\"><span class=\"toc-text\">5)引入Optional类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E6%96%B0%E5%A2%9E%E4%BA%86CompletableFuture%E3%80%81StampedLock%E7%AD%89%E5%B9%B6%E5%8F%91%E5%AE%9E%E7%8E%B0%E7%B1%BB%E3%80%82\"><span class=\"toc-text\">6)新增了CompletableFuture、StampedLock等并发实现类。</span></a></li></ol>","author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"面试官到底喜欢什么样的人？","uid":"76e26cf6d70a50daf8e75fb7d566964d","slug":"面试","date":"2024-12-03T12:35:49.000Z","updated":"2024-12-03T12:35:07.715Z","comments":true,"path":"api/articles/面试.json","keywords":null,"cover":"https://i.pinimg.com/474x/8f/99/70/8f99709dfeb5287cc9126fbb64a99b2e.jpg","text":"面试官到底喜欢什么样的人？在统一批次的面试中，可能就有好几百号人，无可否认的是，我们都喜欢优秀的人，都想和优秀的人共事，那怎么表现出我们的优秀呢？ 面试官喜欢爱...","permalink":"/post/面试","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"面试","slug":"面试","count":1,"path":"api/tags/面试.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}},"next_post":{"title":"test","uid":"bc567916c4dc0d8169bd26d18e348d36","slug":"test","date":"2024-11-09T02:38:44.000Z","updated":"2024-11-09T04:10:34.453Z","comments":true,"path":"api/articles/test.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2024/07/31/12/20/books-8934573_640.jpg","text":"欢迎使用 Markdown 笔记这是首次使用 Markdown 笔记 自动生成的内容，包含 Markdown 语法和应用介绍 表格 & 文本样式 样式 语法 示...","permalink":"/post/test","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"test","slug":"test","count":1,"path":"api/tags/test.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}}}