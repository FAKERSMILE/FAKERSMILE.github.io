{"title":"SPI","uid":"5fa7811420fef5e890cc85bbf0c3fa40","slug":"java基础/SPI","date":"2024-12-03T16:25:08.000Z","updated":"2024-12-03T16:35:43.391Z","comments":true,"path":"api/articles/java基础/SPI.json","keywords":null,"cover":"https://i.pinimg.com/474x/15/0d/32/150d325e01f64442bc6855573f140b99.jpg","content":"<h2 id=\"什么是-SPI-机制？\"><a href=\"#什么是-SPI-机制？\" class=\"headerlink\" title=\"什么是 SPI 机制？\"></a><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-spi-%E6%9C%BA%E5%88%B6\">什么是 SPI 机制？</a></h2><p>SPI（Service Provider Interface），是 JDK 内置的一种<strong>服务提供发现</strong>机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，Java的SPI机制可以为某个接口寻找服务实现。</p>\n<p>Java中SPI机制的主要思想是将装配的控制权转移到程序外，降低耦合度。</p>\n<p><img src=\"https://www.kaiven666.online/images/image-20241028132855227.png\" alt=\"image-20241028132855227\"></p>\n<p>当服务的提供者提供了一种接口的实现之后，需要在classpath下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的<code>META-INF/services/</code>中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务的实现的工具类是：<code>java.util.ServiceLoader</code>。</p>\n<h2 id=\"SPI机制的简单示例\"><a href=\"#SPI机制的简单示例\" class=\"headerlink\" title=\"SPI机制的简单示例\"></a><a href=\"#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\">SPI机制的简单示例</a></h2><p>定义一个搜索接口，搜索关键词是一个参数，返回对应的搜索结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Search &#123;</span><br><span class=\"line\">    String search(String keywords);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件搜索的具体实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FileSearchImpl implements Search&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String search(String keywords) &#123;</span><br><span class=\"line\">        return &quot;我是文件搜索功能的具体实现&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据库搜索的具体实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DataBaseSearchImpl implements Search&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String search(String keywords) &#123;</span><br><span class=\"line\">        return &quot;我是数据库搜索功能的实现&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来可以在resources下新建META-INF&#x2F;services&#x2F;目录，然后新建接口全限定名的文件：<code>com.kaiven.spi.Search</code>，里面加上我们需要用到的实现类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.kaiven.spi.DataBaseSearchImpl</span><br><span class=\"line\">com.kaiven.spi.FileSearchImpl</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        ServiceLoader&lt;Search&gt; load = ServiceLoader.load(Search.class);</span><br><span class=\"line\">        for (Search search : load) &#123;</span><br><span class=\"line\">            System.out.println(search.search(&quot;&quot;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（好玩吧，哈哈）</p>\n<h2 id=\"SPI机制的典型应用\"><a href=\"#SPI机制的典型应用\" class=\"headerlink\" title=\"SPI机制的典型应用\"></a><a href=\"#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8\">SPI机制的典型应用</a></h2><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93\">数据库</a></h4><p>JDBC提供了统一的数据库相关操作的接口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Driver &#123;</span><br><span class=\"line\">    Connection connect(String url, java.util.Properties info)</span><br><span class=\"line\">        throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean acceptsURL(String url) throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">    DriverPropertyInfo[] getPropertyInfo(String url, java.util.Properties info)</span><br><span class=\"line\">                         throws SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">    int getMajorVersion();</span><br><span class=\"line\"></span><br><span class=\"line\">    int getMinorVersion();</span><br><span class=\"line\"></span><br><span class=\"line\">    public Logger getParentLogger() throws SQLFeatureNotSupportedException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就是所谓的数据库驱动接口。</p>\n<p>让我们看一下mysql是怎么实现的：</p>\n<p><img src=\"https://www.kaiven666.online/images/image-20241028140212583.png\" alt=\"image-20241028140212583\"></p>\n<p>是不是和我们上面写的例子一模一样呢？哈哈。</p>\n<p>（其他的应用场景可以自行百度扩展一下，特别是Spring的，想一下没有SpringBoot之前，是不是一大堆的xml配置文件）</p>\n<h2 id=\"SPI机制深入理解\"><a href=\"#SPI机制深入理解\" class=\"headerlink\" title=\"SPI机制深入理解\"></a><a href=\"#spi%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3\">SPI机制深入理解</a></h2><h4 id=\"SPI和API的区别？\"><a href=\"#SPI和API的区别？\" class=\"headerlink\" title=\"SPI和API的区别？\"></a><a href=\"#spi%E5%92%8Capi%E7%9A%84%E5%8C%BA%E5%88%AB\">SPI和API的区别？</a></h4><p>使用SPI机制的时候，我们会将具体的实现抽离出程序外，也就是相当于接口的定义与实现不在同一个包中，比如 JDBC和MySQL驱动的实现。对于API的话，平时的开发中，会将接口与实现类放在同一个包中。前者强调调用方，后者强调实现方。</p>\n<h4 id=\"SPI机制的实现原理\"><a href=\"#SPI机制的实现原理\" class=\"headerlink\" title=\"SPI机制的实现原理\"></a><a href=\"#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">SPI机制的实现原理</a></h4><p>（这个感兴趣的可以自行去查看JDK中<code>ServiceLoader&lt;S&gt;</code>方法的具体实现，面试的话，这里你能讲出一些自己的理解就行了）</p>\n<h4 id=\"SPI机制的缺陷\"><a href=\"#SPI机制的缺陷\" class=\"headerlink\" title=\"SPI机制的缺陷\"></a><a href=\"#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%BC%BA%E9%99%B7\">SPI机制的缺陷</a></h4><ol>\n<li>不能按需加载，需要遍历所有实现，并实例化，然后再循环中才能找到我们的实现。如果不想使用某些实现类，或者某些类实例化很耗时，它也被载入并实例化，这就造成了浪费。</li>\n<li>获取某个实现类的方式不够灵活，只能通过<code>Iterator</code>形式获取，不能根据某个参数来获取对应的实现类。</li>\n<li>多线程使用 ServiceLoader 类的实例是不安全的。</li>\n</ol>\n<hr>\n","text":"什么是 SPI 机制？SPI（Service Provider Interface），是 JDK 内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主...","permalink":"/post/java基础/SPI","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-SPI-%E6%9C%BA%E5%88%B6%EF%BC%9F\"><span class=\"toc-text\">什么是 SPI 机制？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">SPI机制的简单示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">SPI机制的典型应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">数据库</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SPI%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">SPI机制深入理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SPI%E5%92%8CAPI%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">SPI和API的区别？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">SPI机制的实现原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E7%BC%BA%E9%99%B7\"><span class=\"toc-text\">SPI机制的缺陷</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"注解机制","uid":"ffb5215d2da6c9afc674d09b81aafa43","slug":"java基础/注解机制","date":"2024-12-03T16:29:44.000Z","updated":"2024-12-03T16:38:12.295Z","comments":true,"path":"api/articles/java基础/注解机制.json","keywords":null,"cover":"https://i.pinimg.com/474x/15/ee/b4/15eeb4e442d8b174794cff29ab2a412b.jpg","text":"注解基础注解是JDK1.5版本引入的一个新特性，用于对代码进行说明。 注解的作用 通过代码里标识的元数据生成javadoc文档 编译检查 编译时动态处理，比如说...","permalink":"/post/java基础/注解机制","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}},"next_post":{"title":"final详解","uid":"da333f82be06d5afcb21795dbc6a2364","slug":"并发/final详解","date":"2024-12-03T15:28:28.000Z","updated":"2024-12-03T16:35:43.378Z","comments":true,"path":"api/articles/并发/final详解.json","keywords":null,"cover":"https://i.pinimg.com/474x/49/17/b8/4917b83d8ea91c9652077becbf757e86.jpg","text":"final基础使用修饰类当某个类的整体定义为final时，就表明了你不能打算继承该类，而且也不允许别人这么做。即这个类是不能有子类的。 注意：final类中的所...","permalink":"/post/并发/final详解","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"},{"name":"并发框架","slug":"并发框架","count":7,"path":"api/tags/并发框架.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}}}