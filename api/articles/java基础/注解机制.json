{"title":"注解机制","uid":"ffb5215d2da6c9afc674d09b81aafa43","slug":"java基础/注解机制","date":"2024-12-03T16:29:44.000Z","updated":"2024-12-03T16:38:12.295Z","comments":true,"path":"api/articles/java基础/注解机制.json","keywords":null,"cover":"https://i.pinimg.com/474x/15/ee/b4/15eeb4e442d8b174794cff29ab2a412b.jpg","content":"<h2 id=\"注解基础\"><a href=\"#注解基础\" class=\"headerlink\" title=\"注解基础\"></a><a href=\"#%E6%B3%A8%E8%A7%A3%E5%9F%BA%E7%A1%80\">注解基础</a></h2><p>注解是JDK1.5版本引入的一个新特性，用于对代码进行说明。</p>\n<h4 id=\"注解的作用\"><a href=\"#注解的作用\" class=\"headerlink\" title=\"注解的作用\"></a><a href=\"#%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%9C%E7%94%A8\">注解的作用</a></h4><ol>\n<li>通过代码里标识的元数据生成javadoc文档</li>\n<li>编译检查</li>\n<li>编译时动态处理，比如说动态生成代码</li>\n<li>运行时动态处理，比如说使用反射注入实例</li>\n</ol>\n<h4 id=\"注解的分类\"><a href=\"#注解的分类\" class=\"headerlink\" title=\"注解的分类\"></a><a href=\"#%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%88%86%E7%B1%BB\">注解的分类</a></h4><ol>\n<li><strong>Java自带的标准注解</strong>，包括<code>@Override</code>、<code>@Deprecated</code>和<code>@SuppressWarnings</code>，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</li>\n<li><strong>元注解</strong>，元注解是用于定义注解的注解，包括<code>@Retention</code>、<code>@Target</code>、<code>@Inherited</code>、<code>@Documented</code>，<code>@Retention</code>用于标明注解被保留的阶段，<code>@Target</code>用于标明注解使用的范围，<code>@Inherited</code>用于标明注解可继承，<code>@Documented</code>用于标明是否生成javadoc文档。</li>\n<li><strong>自定义注解</strong>，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。</li>\n</ol>\n<h3 id=\"Java内置注解\"><a href=\"#Java内置注解\" class=\"headerlink\" title=\"Java内置注解\"></a><a href=\"#java%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3\">Java内置注解</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void test()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test extends Solution &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 重写父类方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 被弃用的方法（后续版本可能移除，不推荐再使用）</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Deprecated</span><br><span class=\"line\">    public void oldMethod()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 忽略警告</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class=\"line\">    public List list()&#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Override\"><a href=\"#Override\" class=\"headerlink\" title=\"@Override\"></a><a href=\"#override\">@Override</a></h4><p>我们来看一下这个注解的内部是什么样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(ElementType.METHOD) // 表示该注解用来修饰方法的</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE) // 表示该注解仅在编译时有效</span><br><span class=\"line\">public @interface Override &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Deprecated\"><a href=\"#Deprecated\" class=\"headerlink\" title=\"@Deprecated\"></a><a href=\"#deprecated\">@Deprecated</a></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Documented // 能够被文档化</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME) // 可以保留到运行时</span><br><span class=\"line\">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE&#125;) // 作用域相当的广泛</span><br><span class=\"line\">public @interface Deprecated &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the version in which the annotated element became deprecated.</span><br><span class=\"line\">     * The version string is in the same format and namespace as the value of</span><br><span class=\"line\">     * the &#123;@code @since&#125; javadoc tag. The default value is the empty</span><br><span class=\"line\">     * string.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the version string</span><br><span class=\"line\">     * @since 9</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String since() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Indicates whether the annotated element is subject to removal in a</span><br><span class=\"line\">     * future version. The default value is &#123;@code false&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return whether the element is subject to removal</span><br><span class=\"line\">     * @since 9</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean forRemoval() default false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SuppressWarnings\"><a href=\"#SuppressWarnings\" class=\"headerlink\" title=\"@SuppressWarnings\"></a><a href=\"#suppresswarnings\">@SuppressWarnings</a></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE&#125;) // 作用域相当广泛</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE) // 仅在编译时有效</span><br><span class=\"line\">public @interface SuppressWarnings &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The set of warnings that are to be suppressed by the compiler in the</span><br><span class=\"line\">     * annotated element.  Duplicate names are permitted.  The second and</span><br><span class=\"line\">     * successive occurrences of a name are ignored.  The presence of</span><br><span class=\"line\">     * unrecognized warning names is &lt;i&gt;not&lt;/i&gt; an error: Compilers must</span><br><span class=\"line\">     * ignore any warning names they do not recognize.  They are, however,</span><br><span class=\"line\">     * free to emit a warning if an annotation contains an unrecognized</span><br><span class=\"line\">     * warning name.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt; The string &#123;@code &quot;unchecked&quot;&#125; is used to suppress</span><br><span class=\"line\">     * unchecked warnings. Compiler vendors should document the</span><br><span class=\"line\">     * additional warning names they support in conjunction with this</span><br><span class=\"line\">     * annotation type. They are encouraged to cooperate to ensure</span><br><span class=\"line\">     * that the same names work across multiple compilers.</span><br><span class=\"line\">     * @return the set of warnings to be suppressed</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String[] value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a><a href=\"#%E5%85%83%E6%B3%A8%E8%A7%A3\">元注解</a></h2><h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a><a href=\"#target\">@Target</a></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Documented</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class=\"line\">public @interface Target &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an array of the kinds of elements an annotation interface</span><br><span class=\"line\">     * can be applied to.</span><br><span class=\"line\">     * @return an array of the kinds of elements an annotation interface</span><br><span class=\"line\">     * can be applied to</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ElementType[] value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该注解的作用就是限定注解的使用范围，具体范围如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ElementType &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    TYPE, // 类、接口、枚举类</span><br><span class=\"line\"> </span><br><span class=\"line\">    FIELD, // 成员变量（包括：枚举常量）</span><br><span class=\"line\"> </span><br><span class=\"line\">    METHOD, // 成员方法</span><br><span class=\"line\"> </span><br><span class=\"line\">    PARAMETER, // 方法参数</span><br><span class=\"line\"> </span><br><span class=\"line\">    CONSTRUCTOR, // 构造方法</span><br><span class=\"line\"> </span><br><span class=\"line\">    LOCAL_VARIABLE, // 局部变量</span><br><span class=\"line\"> </span><br><span class=\"line\">    ANNOTATION_TYPE, // 注解类</span><br><span class=\"line\"> </span><br><span class=\"line\">    PACKAGE, // 可用于修饰：包</span><br><span class=\"line\"> </span><br><span class=\"line\">    TYPE_PARAMETER, // 类型参数，JDK 1.8 新增</span><br><span class=\"line\"> </span><br><span class=\"line\">    TYPE_USE // 使用类型的任何地方，JDK 1.8 新增</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到该注解自身也加上了一个 @Target(ElementType.ANNOTATION_TYPE) 。</p>\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a><a href=\"#retention\">@Retention</a></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Documented</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class=\"line\">public @interface Retention &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the retention policy.</span><br><span class=\"line\">     * @return the retention policy</span><br><span class=\"line\">     */</span><br><span class=\"line\">    RetentionPolicy value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该注解的作用就是描述注解保留的时间（或者叫做阶段吧）。总共有三个阶段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum RetentionPolicy &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Annotations are to be discarded by the compiler.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    SOURCE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Annotations are to be recorded in the class file by the compiler</span><br><span class=\"line\">     * but need not be retained by the VM at run time.  This is the default</span><br><span class=\"line\">     * behavior.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    CLASS,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Annotations are to be recorded in the class file by the compiler and</span><br><span class=\"line\">     * retained by the VM at run time, so they may be read reflectively.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @see java.lang.reflect.AnnotatedElement</span><br><span class=\"line\">     */</span><br><span class=\"line\">    RUNTIME</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（英文描述得已经很清晰了）</p>\n<h4 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a><a href=\"#documented\">@Documented</a></h4><p>该注解的作用就是在使用 javadoc 工具为类生成帮助文档时保留注解信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Documented</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class=\"line\">public @interface Documented &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a><a href=\"#inherited\">@Inherited</a></h4><p>如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Documented</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class=\"line\">public @interface Inherited &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注解与反射\"><a href=\"#注解与反射\" class=\"headerlink\" title=\"注解与反射\"></a><a href=\"#%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84\">注解与反射</a></h2><p>在使用SpringBoot进行开发的时候，你会感慨为什么写几个注解就能够将项目跑起来，那肯定是因为框架的开发者在你看不见的地方替你完成了某些操作。</p>\n<p>注意：注解的生命周期只有是 RUNTIME 才能通过反射去获取。</p>\n<h4 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3\">自定义注解</a></h4><p>我们来编写一个属于自己的注解吧。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.kaiven.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">@Target(ElementType.METHOD) // 作用在方法上</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME) // 保留到运行时，否则无法通过反射获取</span><br><span class=\"line\">public @interface GetMapping &#123;</span><br><span class=\"line\">    String value() default &quot;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.kaiven;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.kaiven.anno.GetMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws NoSuchMethodException &#123;</span><br><span class=\"line\">        Method hello = Main.class.getMethod(&quot;hello&quot;);</span><br><span class=\"line\">        // 如果该方法上有GetMapping注解</span><br><span class=\"line\">        if (hello.isAnnotationPresent(GetMapping.class)) &#123;</span><br><span class=\"line\">            GetMapping annotation = hello.getAnnotation(GetMapping.class);</span><br><span class=\"line\">            System.out.println(annotation.value());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">    public String hello()&#123;</span><br><span class=\"line\">        return &quot;Hello world!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有没有那一点点的味道了？</p>\n<h2 id=\"深入理解注解\"><a href=\"#深入理解注解\" class=\"headerlink\" title=\"深入理解注解\"></a><a href=\"#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3\">深入理解注解</a></h2><h4 id=\"注解支持继承嘛？\"><a href=\"#注解支持继承嘛？\" class=\"headerlink\" title=\"注解支持继承嘛？\"></a><a href=\"#%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E7%BB%A7%E6%89%BF%E5%98%9B\">注解支持继承嘛？</a></h4><p>注解是不支持继承的，但注解在编译之后，编译器会自动继承java.lang.annotation.Annotation接口。</p>\n<h4 id=\"注解实现的原理？\"><a href=\"#注解实现的原理？\" class=\"headerlink\" title=\"注解实现的原理？\"></a><a href=\"#%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86\">注解实现的原理？</a></h4><p><a href=\"https://blog.csdn.net/qq/_20009015/article/details/106038023\">https://blog.csdn.net/qq\\_20009015/article/details/106038023</a></p>\n<p>（对于注解的应用，大多还是与Spring相关的，最大的一个变化就是从xml配置项目到注解化的转变）</p>\n<hr>\n","feature":true,"text":"注解基础注解是JDK1.5版本引入的一个新特性，用于对代码进行说明。 注解的作用 通过代码里标识的元数据生成javadoc文档 编译检查 编译时动态处理，比如说...","permalink":"/post/java基础/注解机制","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"八股","slug":"八股","count":14,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":12,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">注解基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">注解的作用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">注解的分类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">Java内置注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Override\"><span class=\"toc-text\">@Override</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Deprecated\"><span class=\"toc-text\">@Deprecated</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SuppressWarnings\"><span class=\"toc-text\">@SuppressWarnings</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">元注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Target\"><span class=\"toc-text\">@Target</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Retention\"><span class=\"toc-text\">@Retention</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Documented\"><span class=\"toc-text\">@Documented</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Inherited\"><span class=\"toc-text\">@Inherited</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84\"><span class=\"toc-text\">注解与反射</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">自定义注解</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">深入理解注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E7%BB%A7%E6%89%BF%E5%98%9B%EF%BC%9F\"><span class=\"toc-text\">注解支持继承嘛？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">注解实现的原理？</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"反射机制","uid":"5bcef49cfc4866658bd7f1721b4f6cb7","slug":"java基础/反射机制","date":"2024-12-03T16:33:37.000Z","updated":"2024-12-03T16:39:38.000Z","comments":true,"path":"api/articles/java基础/反射机制.json","keywords":null,"cover":"https://i.pinimg.com/474x/30/a6/75/30a675adb583e4e4ccae55bad6fe2496.jpg","text":"对于Java的反射机制，精炼一点就是，可以在程序运行时获取类和对象的信息，包括属性和方法。 反射基础Class类和普通的类没有什么区别，有属性，有方法。 我们编...","permalink":"/post/java基础/反射机制","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"八股","slug":"八股","count":14,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":12,"path":"api/tags/java.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"feature":true},"next_post":{"title":"SPI","uid":"5fa7811420fef5e890cc85bbf0c3fa40","slug":"java基础/SPI","date":"2024-12-03T16:25:08.000Z","updated":"2024-12-03T16:35:43.391Z","comments":true,"path":"api/articles/java基础/SPI.json","keywords":null,"cover":"https://i.pinimg.com/474x/15/0d/32/150d325e01f64442bc6855573f140b99.jpg","text":"什么是 SPI 机制？SPI（Service Provider Interface），是 JDK 内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主...","permalink":"/post/java基础/SPI","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"八股","slug":"八股","count":14,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":12,"path":"api/tags/java.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"feature":true}}