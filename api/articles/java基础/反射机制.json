{"title":"反射机制","uid":"5bcef49cfc4866658bd7f1721b4f6cb7","slug":"java基础/反射机制","date":"2024-12-03T16:33:37.000Z","updated":"2024-12-03T16:39:38.000Z","comments":true,"path":"api/articles/java基础/反射机制.json","keywords":null,"cover":"https://i.pinimg.com/474x/30/a6/75/30a675adb583e4e4ccae55bad6fe2496.jpg","content":"<p>对于Java的反射机制，精炼一点就是，可以在程序运行时获取类和对象的信息，包括属性和方法。</p>\n<h2 id=\"反射基础\"><a href=\"#反射基础\" class=\"headerlink\" title=\"反射基础\"></a><a href=\"#%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80\">反射基础</a></h2><h4 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a><a href=\"#class%E7%B1%BB\">Class类</a></h4><p>和普通的类没有什么区别，有属性，有方法。</p>\n<p>我们编写的类在被编译后，都会附带一个Class对象，表示创建类的类型信息，被写入在同名的class字节码文件中。</p>\n<p>我们无法手动创建Class类的对象，因为其构造函数是私有化的。</p>\n<p>Class对象的作用是运行时提供某个对象的类型信息。</p>\n<h2 id=\"反射的使用\"><a href=\"#反射的使用\" class=\"headerlink\" title=\"反射的使用\"></a><a href=\"#%E5%8F%8D%E5%B0%84%E7%9A%84%E4%BD%BF%E7%94%A8\">反射的使用</a></h2><p>对于对象，我们的常规操作是什么？</p>\n<p>无非就是new一个对象出来、改变对象的状态（修改属性值）、调用对象方法。</p>\n<p>不过，现在，我们要使用反射机制来完成这些操作。</p>\n<h4 id=\"Class类对象的获取\"><a href=\"#Class类对象的获取\" class=\"headerlink\" title=\"Class类对象的获取\"></a><a href=\"#class%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%8E%B7%E5%8F%96\">Class类对象的获取</a></h4><p>在类加载的时候，jvm会创建一个class对象。</p>\n<p>获取class对象的三种方式：</p>\n<ol>\n<li>类名.class</li>\n<li>对象.getClass()</li>\n<li>Class.forName(全限定类名)</li>\n</ol>\n<p>（这里简单演示一下就行了，毕竟平时开发的时候真的很少用这玩意儿啦）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person(String name, int age) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void sayHello()&#123;</span><br><span class=\"line\">        System.out.println(&quot;hello&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;Person [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个新的对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException &#123;</span><br><span class=\"line\">       Constructor&lt;Person&gt; constructor = Person.class.getDeclaredConstructor(String.class,int.class);</span><br><span class=\"line\">       Person person = constructor.newInstance(&quot;kaiven&quot;,20);</span><br><span class=\"line\">       System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改变对象的状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException,</span><br><span class=\"line\">            IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class=\"line\">        Person person = new Person(&quot;kaiven&quot;, 20);</span><br><span class=\"line\">        Field namField = person.getClass().getDeclaredField(&quot;name&quot;);</span><br><span class=\"line\">        namField.setAccessible(true);</span><br><span class=\"line\">        namField.set(person, &quot;lucy&quot;);</span><br><span class=\"line\">        System.out.println(person.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用对象方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException,</span><br><span class=\"line\">            IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class=\"line\">        Person person = new Person(&quot;kaiven&quot;, 20);</span><br><span class=\"line\">        Method method = person.getClass().getDeclaredMethod(&quot;sayHello&quot;);</span><br><span class=\"line\">        method.setAccessible(true);</span><br><span class=\"line\">        method.invoke(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（想玩儿的时候自己去查阅文档玩儿一下就行了）</p>\n<h2 id=\"反射机制执行的流程\"><a href=\"#反射机制执行的流程\" class=\"headerlink\" title=\"反射机制执行的流程\"></a><a href=\"#%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%89%A7%E8%A1%8C%E7%9A%84%E6%B5%81%E7%A8%8B\">反射机制执行的流程</a></h2><p>（等我去搞一下JVM，哈哈。先欠着，以后还。）</p>\n<hr>\n","feature":true,"text":"对于Java的反射机制，精炼一点就是，可以在程序运行时获取类和对象的信息，包括属性和方法。 反射基础Class类和普通的类没有什么区别，有属性，有方法。 我们编...","permalink":"/post/java基础/反射机制","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"八股","slug":"八股","count":16,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":14,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">反射基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Class%E7%B1%BB\"><span class=\"toc-text\">Class类</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">反射的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Class%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">Class类对象的获取</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%89%A7%E8%A1%8C%E7%9A%84%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">反射机制执行的流程</span></a></li></ol>","author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"并发常见面试题","uid":"556da6649af123abe80f5a17d5a2547b","slug":"并发/并发常见面试题（上）","date":"2024-12-03T17:21:45.000Z","updated":"2024-12-03T17:42:39.402Z","comments":true,"path":"api/articles/并发/并发常见面试题（上）.json","keywords":null,"cover":"https://i.pinimg.com/474x/71/d9/ee/71d9ee42673510f2b5e4326ad076a1f4.jpg","text":"# Java并发编程面试题# 多线程# java里面的线程和操作系统的线程一样吗？Java 底层会调用 pthread_create 来创建线程，所以本质上 j...","permalink":"/post/并发/并发常见面试题（上）","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"八股","slug":"八股","count":16,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":14,"path":"api/tags/java.json"},{"name":"并发框架","slug":"并发框架","count":7,"path":"api/tags/并发框架.json"},{"name":"精选","slug":"精选","count":3,"path":"api/tags/精选.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"feature":true},"next_post":{"title":"注解机制","uid":"ffb5215d2da6c9afc674d09b81aafa43","slug":"java基础/注解机制","date":"2024-12-03T16:29:44.000Z","updated":"2024-12-03T16:38:12.295Z","comments":true,"path":"api/articles/java基础/注解机制.json","keywords":null,"cover":"https://i.pinimg.com/474x/15/ee/b4/15eeb4e442d8b174794cff29ab2a412b.jpg","text":"注解基础注解是JDK1.5版本引入的一个新特性，用于对代码进行说明。 注解的作用 通过代码里标识的元数据生成javadoc文档 编译检查 编译时动态处理，比如说...","permalink":"/post/java基础/注解机制","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"八股","slug":"八股","count":16,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":14,"path":"api/tags/java.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}}}