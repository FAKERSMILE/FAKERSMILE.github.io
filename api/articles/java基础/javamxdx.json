{"title":"java面向对象","uid":"282ca770e6df8001dbda062738b2a12a","slug":"java基础/javamxdx","date":"2024-12-03T13:21:54.000Z","updated":"2024-12-03T16:35:43.400Z","comments":true,"path":"api/articles/java基础/javamxdx.json","keywords":null,"cover":"https://i.pinimg.com/474x/8e/83/82/8e8382853f408b9143f66f76ed479f7d.jpg","content":"<p>Java给我的感觉就是一个有一个的类，毕竟类是其代码的基本组织单元。</p>\n<p>对象是类实例化的结果，所以对象有时也被称为实例，从类到对象的过程称为实例化。</p>\n<p>面向对象的三大特点：<strong>封装、继承、多态</strong></p>\n<h4 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a><a href=\"#%E5%B0%81%E8%A3%85\">封装</a></h4><p>学术上的东西就不讲了，从开发的视角阐述这个概念。</p>\n<p>通常我们都会将字段的可访问性设置为private，然后通过Getter和Setter方法对外提供查看和设置字段值的接口。</p>\n<p>（我习惯于称作字段，貌似大家都喜欢叫属性）</p>\n<p>上代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Person(String name, int age) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个Person类，对人这个实体的抽象。类中有两个字段：name和age，代表人的姓名和年龄。从代码层面上看，Person类外面的任何方法都不能直接访问这两个字段，只能通过类中提供的方法进行访问和修改。</p>\n<p>这就是封装！！！</p>\n<p>至于说有什么有点，AI来吧：</p>\n<p>面向对象编程（OOP）中的封装是一个核心概念，它提供了以下优点：</p>\n<ol>\n<li><p><strong>数据隐藏</strong>：封装允许对象隐藏其内部状态和复杂性，只暴露一个清晰的接口给外部世界。这降低了代码的复杂性，并提高了代码的可理解性。</p>\n</li>\n<li><p><strong>实现细节的保护</strong>：通过隐藏内部实现，封装防止了外部代码直接访问对象的内部数据，从而防止了可能的错误或不当的修改。</p>\n</li>\n<li><p><strong>接口与实现的分离</strong>：封装使得对象的内部实现可以独立于其接口进行修改，只要接口保持不变，外部代码就不需要修改。</p>\n</li>\n<li><p><strong>提高代码的可维护性</strong>：由于对象的内部实现被隐藏，修改这些实现不会影响依赖于该对象的代码，这使得维护和更新变得更加容易。</p>\n</li>\n<li><p><strong>增强代码的安全性</strong>：封装可以防止外部代码访问或修改对象的私有成员，这有助于防止潜在的安全风险。</p>\n</li>\n<li><p><strong>促进重用</strong>：封装提供了一个清晰的接口，使得对象可以在不同的程序和环境中重用，而不需要了解其内部工作机制。</p>\n</li>\n<li><p><strong>减少耦合</strong>：封装减少了类与类之间的直接依赖，从而降低了系统中各部分之间的耦合度。</p>\n</li>\n<li><p><strong>提高代码的可测试性</strong>：封装使得单元测试可以针对特定的对象进行，而不需要考虑整个系统的复杂性。</p>\n</li>\n<li><p><strong>支持多态</strong>：封装与多态一起工作，允许基于接口而非实现编程，这使得使用基类指针或引用调用派生类的方法成为可能。</p>\n</li>\n<li><p><strong>封装继承</strong>：在支持继承的语言中，封装允许子类继承父类的属性和方法，同时可以扩展或修改这些属性和方法，而不需要更改外部代码。</p>\n</li>\n<li><p><strong>促进模块化设计</strong>：封装鼓励将系统分解成模块或类，每个模块或类都有自己的职责，这有助于构建更大规模的系统。</p>\n</li>\n<li><p><strong>提高代码的组织性</strong>：封装要求将相关的数据和操作这些数据的方法组合在一起，这有助于提高代码的组织性和结构化。</p>\n</li>\n</ol>\n<p>总的来说，封装是面向对象设计的一个关键原则，它有助于创建更健壮、更灵活和更易于维护的软件。</p>\n<p>随便扫一眼就行了。。。</p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a><a href=\"#%E7%BB%A7%E6%89%BF\">继承</a></h4><p>这个没有什么好说的，<strong>子类可以继承父类非private的字段和方法</strong>。</p>\n<p>在实际开发中，我们往往使用<strong>父类变量去引用子类对象</strong>，除非想调用子类对象的扩展的方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Student(String name, int age) &#123;</span><br><span class=\"line\">        super(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void sayHello()&#123;</span><br><span class=\"line\">        System.out.println(&quot;Hello Java&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Person person = new Student(&quot;kaiven&quot;, 20);</span><br><span class=\"line\">        System.out.println(person.getName() + person.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于Student继承了Person，所以Person类型的变量可以引用Student类型的对象。</p>\n<p>当然，考虑以下语句，能够正常运行：</p>\n<p>如果你尝试了，会发现不行。其实是可以的，因为引用的是Student对象嘛。但是，通不过编译器，因为Person类中没有sayHello这个方法。</p>\n<p>如果我们想调用属于这个子类对象的特有方法，只能通过<strong>类型强转</strong>去通过编译器的检查：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Person person = new Student(&quot;kaiven&quot;, 20);</span><br><span class=\"line\">        Student student = (Student) person;</span><br><span class=\"line\">        student.sayHello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a><a href=\"#%E5%A4%9A%E6%80%81\">多态</a></h4><p>不要去抓着这个字眼不放了，你越想就越容易钻牛角尖。</p>\n<p>Java中的多态，分为<strong>编译时多态和运行时多态</strong>。</p>\n<p><strong>编译时多态指的是方法的重载</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Student(String name, int age) &#123;</span><br><span class=\"line\">        super(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void sayHello()&#123;</span><br><span class=\"line\">        System.out.println(&quot;Hello Java&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void sayHello(String content)&#123;</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行时多态指的是程序中定义的对象引用的具体类型在运行期间才确定。</p>\n<p>运行时多态的三个条件：<strong>继承、覆盖（重写）、向上转型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Student(String name, int age) &#123;</span><br><span class=\"line\">        super(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return &quot;我就不告诉你我的名次&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Teacher extends Person&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Teacher(String name, int age) &#123;</span><br><span class=\"line\">        super(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return &quot;我可以告诉你我的名字，但是是假的&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Person person01 = new Student(&quot;kaiven&quot;, 20);</span><br><span class=\"line\">        Person person02 = new Teacher(&quot;jack&quot;, 22);</span><br><span class=\"line\">        System.out.println(person01.getName());</span><br><span class=\"line\">        System.out.println(person02.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JVM知道应该调用哪个方法的，不用担心。</p>\n<hr>\n","text":"Java给我的感觉就是一个有一个的类，毕竟类是其代码的基本组织单元。 对象是类实例化的结果，所以对象有时也被称为实例，从类到对象的过程称为实例化。 面向对象的三...","permalink":"/post/java基础/javamxdx","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">封装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">多态</span></a></li></ol>","author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"计算机网络","uid":"293c17b4d2a4292133cc4d1ffd7f8725","slug":"计网/计算机网络","date":"2024-12-03T14:23:01.000Z","updated":"2024-12-03T16:35:43.375Z","comments":true,"path":"api/articles/计网/计算机网络.json","keywords":null,"cover":"https://i.pinimg.com/236x/69/25/ad/6925ad87d9fd333a079da2b53ec08834.jpg","text":"OSI模型、TCP/IP模型、五层模型 ？ 刚开始学习的小伙伴一定会被这些搞懵逼的，傻傻分不清哦。 这个所谓的七层模型，实际上那帮搞学术的弄出来的，但是很可惜，...","permalink":"/post/计网/计算机网络","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":1,"path":"api/tags/计算机网络.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}},"next_post":{"title":"java导学","uid":"5d0fb8fa16015e90389a3f31d7e8667c","slug":"java导学","date":"2024-12-03T13:13:19.000Z","updated":"2024-12-03T16:35:43.385Z","comments":true,"path":"api/articles/java导学.json","keywords":null,"cover":"https://i.pinimg.com/474x/a0/3f/5c/a03f5c2ed311ca2f8fdd62915f30d933.jpg","text":"恭喜你，成功入坑Java开发，以后将走上后端开发的道路。 Java是一门什么样的编程语言呢？ （AI的回答） Java 是一种广泛使用的编程语言，它由Sun M...","permalink":"/post/java导学","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"},{"name":"java基础","slug":"java基础","count":2,"path":"api/tags/java基础.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}}}