{"title":"数据结构与算法","uid":"11c0f2fa5655c019aeb2222b34a90ab0","slug":"数据结构与算法","date":"2024-12-04T04:38:03.000Z","updated":"2024-12-07T10:33:23.304Z","comments":true,"path":"api/articles/数据结构与算法.json","keywords":null,"cover":["https://i.pinimg.com/236x/91/34/61/913461c4b6efde81d9ba09014f3de060.jpg"],"content":"<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"# 数据结构与算法\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95\">#</a> 数据结构与算法</h2><h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"# 数据结构\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">#</a> 数据结构</h2><h3 id=\"了解哪些数据结构？\"><a href=\"#了解哪些数据结构？\" class=\"headerlink\" title=\"# 了解哪些数据结构？\"></a><a href=\"#%E4%BA%86%E8%A7%A3%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">#</a> 了解哪些数据结构？</h3><ul>\n<li>数组：数组的内存空间是连续的，随机访问的时间复杂度是O1，适用于需要按索引访问元素的场景，但是插入和删除元素较慢，时间复杂度是On</li>\n<li>链表：链表是由节点组成，节点之间是分散存储的，内存不连续，每个节点存储数据和指向下一个节点的指针。适用于频繁插入和删除元素的场景，随机访问元素较慢。</li>\n<li>栈：栈是一种后进先出的数据结构，只允许在栈顶进行插入和删除操作。</li>\n<li>队列：队列是一种先进先出（FIFO）的数据结构，允许在队尾插入元素，在队首删除元素。</li>\n<li>树：树是一种非线性数据结构，由节点和边组成，每个节点可以有多个子节点。树适用于表示层次关系的场景，例如文件系统、组织结构等。</li>\n</ul>\n<h3 id=\"数组和链表区别是什么？\"><a href=\"#数组和链表区别是什么？\" class=\"headerlink\" title=\"# 数组和链表区别是什么？\"></a><a href=\"#%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88\">#</a> 数组和链表区别是什么？</h3><ul>\n<li><strong>访问效率</strong>：数组可以通过索引直接访问任何位置的元素，访问效率高，时间复杂度为O(1)，而链表需要从头节点开始遍历到目标位置，访问效率较低，时间复杂度为O(n)。</li>\n<li><strong>插入和删除操作效率</strong>：数组插入和删除操作可能需要移动其他元素，时间复杂度为O(n)，而链表只需要修改指针指向，时间复杂度为O(1)。</li>\n<li>**缓存命中率：**由于数组元素在内存中连续存储，可以提高CPU缓存的命中率，而链表节点不连续存储，可能导致CPU缓存的命中率较低，频繁的缓存失效会影响性能。</li>\n<li><strong>应用场景</strong>：数组适合静态大小、频繁访问元素的场景，而链表适合动态大小、频繁插入、删除操作的场景</li>\n</ul>\n<h3 id=\"为什么数组查询的复杂度为O-1-？\"><a href=\"#为什么数组查询的复杂度为O-1-？\" class=\"headerlink\" title=\"# 为什么数组查询的复杂度为O(1)？\"></a><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%95%B0%E7%BB%84%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BAo-1\">#</a> 为什么数组查询的复杂度为O(1)？</h3><p>数组必须要内存中一块<strong>连续</strong>的空间，并且数组中必须存放<strong>相同</strong>的数据类型。</p>\n<p>比如我们创建一个长度为 10，数据类型为整型的数组，在内存中的地址是从 1000 开始，那么它在内存中的存储格式如下。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1713860272001-4eb23e67-48aa-41a0-b507-054620c4bf7c.png\" alt=\"img\"></p>\n<p>由于每个整型数据占据 4 个字节的内存空间，因此整个数组的内存空间地址是 1000～1039，根据这个，我们就可以轻易算出数组中每个数据的内存下标地址。</p>\n<p>利用这个特性，我们只要知道了数组下标，也就是数据在数组中的位置，比如下标 2，就可以计算得到这个数据在内存中的位置 1008，从而对这个位置的数据 241 进行快速读写访问，时间复杂度为 O(1)。</p>\n<h3 id=\"说一下队列和栈的区别\"><a href=\"#说一下队列和栈的区别\" class=\"headerlink\" title=\"# 说一下队列和栈的区别\"></a><a href=\"#%E8%AF%B4%E4%B8%80%E4%B8%8B%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB\">#</a> 说一下队列和栈的区别</h3><p>主要区别在于元素的插入和删除方式以及元素的访问顺序。</p>\n<p>插入和删除方式：</p>\n<ul>\n<li>队列：队列采用先进先出（FIFO）的方式，即新元素插入队尾，删除操作发生在队首。</li>\n<li>栈：栈采用后进先出（LIFO）的方式，即新元素插入栈顶，删除操作也发生在栈顶。</li>\n</ul>\n<p>元素的访问顺序：</p>\n<ul>\n<li>队列：队列的元素按照插入的顺序进行访问，先插入的元素先被访问到。</li>\n<li>栈：栈的元素按照插入的顺序进行访问，但是最后插入的元素先被访问到。</li>\n</ul>\n<p>队列适用于需要按照插入顺序进行处理的场景，例如任务调度；</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233440159.png\" alt=\"image-20240725233440159\"></p>\n<p>而栈适用于需要维护最近操作状态的场景，例如函数调用。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233451930.png\" alt=\"image-20240725233451930\"></p>\n<h3 id=\"如何使用两个栈实现队列？\"><a href=\"#如何使用两个栈实现队列？\" class=\"headerlink\" title=\"# 如何使用两个栈实现队列？\"></a><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97\">#</a> 如何使用两个栈实现队列？</h3><p>使用两个栈实现队列的方法如下：</p>\n<ol>\n<li>准备两个栈，分别称为<code>stackPush</code>和<code>stackPop</code>。</li>\n<li>当需要入队时，将元素压入<code>stackPush</code>栈。</li>\n<li>当需要出队时，先判断<code>stackPop</code>是否为空，如果不为空，则直接弹出栈顶元素；如果为空，则将<code>stackPush</code>中的所有元素依次弹出并压入<code>stackPop</code>中，然后再从<code>stackPop</code>中弹出栈顶元素作为出队元素。</li>\n<li>当需要查询队首元素时，同样需要先将<code>stackPush</code>中的元素转移到<code>stackPop</code>中，然后取出<code>stackPop</code>的栈顶元素但不弹出。</li>\n<li>通过上述方法，可以实现用两个栈来模拟队列的先进先出（FIFO）特性。</li>\n</ol>\n<p>这种方法的时间复杂度为O(1)的入队操作，均摊时间复杂度为O(1)的出队和查询队首元素操作。</p>\n<p>以下是使用两个栈实现队列的Java代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyQueue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; stackPush;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; stackPop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stackPush = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        stackPop = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        stackPush.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stackPop.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stackPush.isEmpty()) &#123;</span><br><span class=\"line\">                stackPop.push(stackPush.pop());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stackPop.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">peek</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stackPop.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stackPush.isEmpty()) &#123;</span><br><span class=\"line\">                stackPop.push(stackPush.pop());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stackPop.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">empty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stackPush.isEmpty() &amp;&amp; stackPop.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyQueue</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyQueue</span>();</span><br><span class=\"line\">        queue.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">        queue.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(queue.peek());  <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\">        System.out.println(queue.pop());   <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\">        System.out.println(queue.empty()); <span class=\"comment\">// 输出 false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"平衡二叉树结构是怎么样的？\"><a href=\"#平衡二叉树结构是怎么样的？\" class=\"headerlink\" title=\"# 平衡二叉树结构是怎么样的？\"></a><a href=\"#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84\">#</a> 平衡二叉树结构是怎么样的？</h3><p>使用二叉树搜索树的目的之一是缩短插入、删除、修改和查找（插入、删除、修改都包括查找操作）节点的时间。</p>\n<p>关于查找效率，如果一棵树的高度为h，在最坏的情况，查找一个关键字需要对比 h 次，查找时间复杂度不超过 O(h)。一棵理想的二叉搜索树所有操作的时间可以缩短到 O(logn)（n 是节点总数)。</p>\n<p>然而 O(h) 的时间复杂度仅为理想情况。在最坏情况下，搜索树有可能退化为链表。想象一棵每个结点只有右孩子的二叉搜索树，那么它的性质就和链表一样，所有操作（增删改查）的时间是O(n)。</p>\n<p>可以发现操作的复杂度与树的高度 h 有关。由此引出了平衡树，通过一定操作维持树的高度（平衡性）来降低操作的复杂度。</p>\n<p>所谓的平衡树是指一种改进的二叉查找树，顾名思义平衡树就是将二叉查找树平衡均匀地分布，这样的好处就是可以减少二叉查找树的深度。</p>\n<p>一般情况下二叉查找树的查询复杂度取决于目标节点到树根的距离（即深度），当节点的深度普遍较大时，查询的平均复杂度就会上升，因此为了实现更高效的查询就有了平衡树。</p>\n<p>平衡二叉树平衡的特性：</p>\n<ul>\n<li>左右两个子树的高度差（平衡因子）的绝对值不超过1</li>\n<li>左右两个子树都是一棵平衡二叉树</li>\n</ul>\n<p>非平衡二叉树(左)和平衡二叉树(右)如下图所示：</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1735743-20201108165847587-114546797.png\" alt=\"img\"></p>\n<p>通过平衡的特性，可以有效的减少二叉树的深度，从而提高了查询的效率。</p>\n<p>再来看看下图：</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233509111.png\" alt=\"image-20240725233509111\"></p>\n<p>分析：</p>\n<ul>\n<li>图一是一个平衡二叉树，它满足平衡二叉树的定义。</li>\n<li>图二不是平衡二叉树，其原因并不是不满足平衡因子的条件，而是因为它不满足二叉搜索树的构成条件，这提醒我们平衡二叉树首先要是一棵二叉搜索树。</li>\n<li>图三满足平衡二叉树的构成条件。</li>\n<li>图 4 中的节点 (8) 平衡因子为 3，不满足平衡二叉树的要求。</li>\n</ul>\n<h3 id=\"红黑树说一下，跳表说一下？\"><a href=\"#红黑树说一下，跳表说一下？\" class=\"headerlink\" title=\"# 红黑树说一下，跳表说一下？\"></a><a href=\"#%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%B4%E4%B8%80%E4%B8%8B-%E8%B7%B3%E8%A1%A8%E8%AF%B4%E4%B8%80%E4%B8%8B\">#</a> 红黑树说一下，跳表说一下？</h3><p>红黑树（Red-Black Tree）是一种自平衡的二叉搜索树，它在插入和删除操作后能够通过旋转和重新着色来保持树的平衡。红黑树的特点如下：</p>\n<ol>\n<li>每个节点都有一个颜色，红色或黑色。</li>\n<li>根节点是黑色的。</li>\n<li>每个叶子节点（NIL节点）都是黑色的。</li>\n<li>如果一个节点是红色的，则它的两个子节点都是黑色的。</li>\n<li>从根节点到叶子节点或空子节点的每条路径上，黑色节点的数量是相同的。</li>\n</ol>\n<p>红黑树通过这些特性来保持树的平衡，确保最长路径不超过最短路径的两倍，从而保证了在最坏情况下的搜索、插入和删除操作的时间复杂度都为O(logN)。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233526166.png\" alt=\"image-20240725233526166\"></p>\n<p>跳表（Skip List）是一种基于链表的数据结构，它通过添加多层索引来加速搜索操作。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233537853.png\" alt=\"image-20240725233537853\"></p>\n<p>跳表的特点如下：</p>\n<ol>\n<li>跳表中的数据是有序的。</li>\n<li>跳表中的每个节点都包含一个指向下一层和右侧节点的指针。</li>\n</ol>\n<p>跳表通过多层索引的方式来加速搜索操作。最底层是一个普通的有序链表，而上面的每一层都是前一层的子集，每个节点在上一层都有一个指针指向它在下一层的对应节点。这样，在搜索时可以通过跳过一些节点，直接进入目标区域，从而减少搜索的时间复杂度。</p>\n<p>跳表的平均搜索、插入和删除操作的时间复杂度都为O(logN)，与红黑树相比，跳表的实现更加简单，但空间复杂度稍高。跳表常用于需要高效搜索和插入操作的场景，如数据库、缓存等。</p>\n<h3 id=\"你知道什么地方用了红黑树和跳表吗？\"><a href=\"#你知道什么地方用了红黑树和跳表吗？\" class=\"headerlink\" title=\"# 你知道什么地方用了红黑树和跳表吗？\"></a><a href=\"#%E4%BD%A0%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88%E5%9C%B0%E6%96%B9%E7%94%A8%E4%BA%86%E7%BA%A2%E9%BB%91%E6%A0%91%E5%92%8C%E8%B7%B3%E8%A1%A8%E5%90%97\">#</a> 你知道什么地方用了红黑树和跳表吗？</h3><ul>\n<li>epoll 用了红黑树来保存监听的 socket</li>\n<li>redis 用了跳表来实现 zset</li>\n</ul>\n<h3 id=\"跳表时间复杂度？\"><a href=\"#跳表时间复杂度？\" class=\"headerlink\" title=\"# 跳表时间复杂度？\"></a><a href=\"#%E8%B7%B3%E8%A1%A8%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">#</a> 跳表时间复杂度？</h3><p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233553870.png\" alt=\"image-20240725233553870\"></p>\n<ul>\n<li>搜索操作的时间复杂度：O(log n)，其中n是跳表中元素的数量。这是因为跳表中使用多级索引，可以通过跳跃的方式快速定位到目标元素所在的位置，从而将搜索的时间复杂度降低到对数级别。</li>\n<li>插入和删除操作的时间复杂度：O(log n)，其中n是跳表中元素的数量。与搜索操作类似，插入和删除操作也可以通过跳跃的方式快速定位到需要插入或删除的位置，并进行相应的操作。因此，插入和删除的时间复杂度也是对数级别的。</li>\n</ul>\n<h3 id=\"红黑树的数据结构介绍一下？\"><a href=\"#红黑树的数据结构介绍一下？\" class=\"headerlink\" title=\"# 红黑树的数据结构介绍一下？\"></a><a href=\"#%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B\">#</a> 红黑树的数据结构介绍一下？</h3><p>红黑树是一种自平衡的二叉查找树，</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1716015879195-fb9dc798-dfe8-4bf5-99d0-33c92a26bf8b.webp\" alt=\"img\"></p>\n<p>具有以下特点：</p>\n<ol>\n<li>每个节点要么是红色，要么是黑色。</li>\n<li>根节点是黑色。</li>\n<li>每个叶子节点（NIL节点）是黑色。</li>\n<li>如果一个节点是红色，则其子节点必须是黑色。</li>\n<li>从任一节点到其每个叶子节点的所有路径都包含相同数目的黑色节点。</li>\n</ol>\n<p>红黑树的自平衡性质可以保证在进行插入、删除等操作后，树的高度保持在O(log n)内，从而保持了较高的查找、插入和删除效率。下面是红黑树插入节点的过程，这左旋右旋的操作，就是为了自平衡。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1716015879219-fb418c32-57d7-461a-908e-cb4b5f1feff7.gif\" alt=\"img\"></p>\n<h3 id=\"二叉树搜索最坏的时间复杂度，为什么会这样？以及用什么结果解决？\"><a href=\"#二叉树搜索最坏的时间复杂度，为什么会这样？以及用什么结果解决？\" class=\"headerlink\" title=\"# 二叉树搜索最坏的时间复杂度，为什么会这样？以及用什么结果解决？\"></a><a href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E6%90%9C%E7%B4%A2%E6%9C%80%E5%9D%8F%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%BF%99%E6%A0%B7-%E4%BB%A5%E5%8F%8A%E7%94%A8%E4%BB%80%E4%B9%88%E7%BB%93%E6%9E%9C%E8%A7%A3%E5%86%B3\">#</a> 二叉树搜索最坏的时间复杂度，为什么会这样？以及用什么结果解决？</h3><p>**当每次插入的元素都是二叉查找树中最大的元素，二叉查找树就会退化成了一条链表，查找数据的时间复杂度变成了 O(n)**，如下动图演示：</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1719298326342-05359c13-7dc9-473d-9b7c-035bc044c2c9.gif\" alt=\"img\"></p>\n<p>二叉查找树由于存在退化成链表的可能性，会使得查询操作的时间复杂度从 O(logn) 升为 O(n)。</p>\n<p>为了解决二叉查找树会在极端情况下退化成链表的问题，后面就有人提出<strong>平衡二叉查找树（AVL 树）</strong>。</p>\n<p>主要是在二叉查找树的基础上增加了一些条件约束：<strong>每个节点的左子树和右子树的高度差不能超过 1</strong>。也就是说节点的左子树和右子树仍然为平衡二叉树，这样查询操作的时间复杂度就会一直维持在 O(logn) 。</p>\n<p>下图是每次插入的元素都是平衡二叉查找树中最大的元素，可以看到，它会维持自平衡：</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1719298358056-6b32c38a-32df-429c-a4c5-6c3e07cbd360.gif\" alt=\"img\"></p>\n<p>除了平衡二叉查找树，还有很多自平衡的二叉树，比如红黑树，它也是通过一些约束条件来达到自平衡，不过红黑树的约束条件比较复杂。下面是红黑树插入节点的过程，这左旋右旋的操作，就是为了自平衡。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1719298358403-d3be5886-1cd9-4b07-888d-4476e42f8fcc.gif\" alt=\"img\"></p>\n<h3 id=\"B-树的特点是什么？\"><a href=\"#B-树的特点是什么？\" class=\"headerlink\" title=\"# B+树的特点是什么？\"></a><a href=\"#b-%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88\">#</a> B+树的特点是什么？</h3><ul>\n<li>B+树是一种自平衡的多路查找树，所有叶节点都位于同一层，保证了树的平衡，使得搜索、插入和删除操作的时间复杂度为对数级别的。</li>\n<li>非叶节点仅包含索引信息，不存储具体的数据记录，它们只用来引导搜索到正确的叶节点。非叶节点的子树指针与关键字数量相同，每个子树指针指向一个子树，子树中的所有键值都在某个区间内。</li>\n<li>所有数据记录都存储在叶节点中，且叶节点中的数据是按关键字排序的。叶节点包含实际的数据和关键字，它们是数据存储和检索的实体单元。叶节点之间通过指针相互链接，形成一个链表，便于范围查询和顺序遍历。</li>\n</ul>\n<h3 id=\"B-树和B树有什么不一样，B-树的叶子节点和非叶子节点有什么不一样，非叶子节点会不会存数据？\"><a href=\"#B-树和B树有什么不一样，B-树的叶子节点和非叶子节点有什么不一样，非叶子节点会不会存数据？\" class=\"headerlink\" title=\"# B+树和B树有什么不一样，B+树的叶子节点和非叶子节点有什么不一样，非叶子节点会不会存数据？\"></a><a href=\"#b-%E6%A0%91%E5%92%8Cb%E6%A0%91%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E4%B8%80%E6%A0%B7-b-%E6%A0%91%E7%9A%84%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E5%92%8C%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E4%B8%80%E6%A0%B7-%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E4%BC%9A%E4%B8%8D%E4%BC%9A%E5%AD%98%E6%95%B0%E6%8D%AE\">#</a> B+树和B树有什么不一样，B+树的叶子节点和非叶子节点有什么不一样，非叶子节点会不会存数据？</h3><ul>\n<li><strong>检索路径</strong>：B树在查找数据时，可能在非叶子节点找到目标数据，路径长度不固定。即查找时可以在任意一个节点终止。B+树中所有数据都在叶子节点，查找数据时必须走到叶子节点，路径长度固定（均等）。即查找总是要到叶子节点结束。</li>\n<li><strong>叶子节点结构</strong>：B树中叶子节点之间没有特别的链接，彼此独立。B+树中叶子节点通过指针连接，形成一个有序链表，便于范围查询和顺序访问。</li>\n<li><strong>非叶子节点内容</strong>：B树中非叶子节点存储数据和索引。B+树中非叶子节点只存储索引，不存储实际数据。因此，当数据量比较大时，相对于B树，B+树的层高更少，查找效率也就更高。</li>\n<li>**高效地范围查询：**B+树叶子节点采用的是双链表连接，适合 MySQL 中常见的基于范围的顺序查找，而 B 树在进行范围查询时需要进行中序遍历，性能较差。</li>\n</ul>\n<h3 id=\"堆是什么？\"><a href=\"#堆是什么？\" class=\"headerlink\" title=\"# 堆是什么？\"></a><a href=\"#%E5%A0%86%E6%98%AF%E4%BB%80%E4%B9%88\">#</a> 堆是什么？</h3><p>堆是一颗完全二叉树，这样实现的堆也被称为<strong>二叉堆</strong>。堆中节点的值都大于等于（或小于等于）其子节点的值，堆中如果节点的值都大于等于其子节点的值，我们把它称为<strong>大顶堆</strong>，如果都小于等于其子节点的值，我们将其称为<strong>小顶堆</strong>。</p>\n<p>下图中，1，2 是大顶堆，3 是小顶堆， 4 不是堆（不是完全二叉树）</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233642091.png\" alt=\"image-20240725233642091\"></p>\n<h3 id=\"LRU是什么？如何实现？\"><a href=\"#LRU是什么？如何实现？\" class=\"headerlink\" title=\"# LRU是什么？如何实现？\"></a><a href=\"#lru%E6%98%AF%E4%BB%80%E4%B9%88-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\">#</a> LRU是什么？如何实现？</h3><p>LRU 是一种缓存淘汰算法，当缓存空间已满时，优先淘汰最长时间未被访问的数据。</p>\n<p>实现的方式是哈希表+双向链表结合。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233704781.png\" alt=\"image-20240725233704781\"></p>\n<p>具体实现步骤如下：</p>\n<ul>\n<li>使用哈希表存储数据的键值对，键为缓存的键，值为对应的节点。</li>\n<li>使用双向链表存储数据节点，链表头部为最近访问的节点，链表尾部为最久未访问的节点。</li>\n<li>当数据被访问时，如果数据存在于缓存中，则将对应节点移动到链表头部；如果数据不存在于缓存中，则将数据添加到缓存中，同时创建一个新节点并插入到链表头部。</li>\n<li>当缓存空间已满时，需要淘汰最久未访问的节点，即链表尾部的节点。</li>\n</ul>\n<p>上面这种思想方式，LRU 算法可以在 O(1) 的时间复杂度内实现数据的插入、查找和删除操作。每次访问数据时，都会将对应的节点移动到链表头部，保证链表头部的节点是最近访问的数据，而链表尾部的节点是最久未访问的数据。当缓存空间不足时，淘汰链表尾部的节点即可。</p>\n<h3 id=\"布隆过滤器怎么设计？时间复杂度？\"><a href=\"#布隆过滤器怎么设计？时间复杂度？\" class=\"headerlink\" title=\"# 布隆过滤器怎么设计？时间复杂度？\"></a><a href=\"#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">#</a> <strong>布隆过滤器怎么设计？时间复杂度？</strong></h3><p>在开发过程中，经常要判断一个元素是否在一个集合中。假设你现在要给项目添加IP黑名单功能，此时你手上有大约 1亿个恶意IP的数据集，有一个IP发起请求，你如何判断这个IP在不在你的黑名单中？</p>\n<p>类似这种问题用Java自己的Collection和Map很难处理，因为它们存储元素本身，会造成内存不足，而我们只关心元素存不存在，对于元素的值我们并不关心，具体值是什么并不重要。</p>\n<p>「<strong>布隆过滤器</strong>」可以用来解决类似的问题，具有运行快速，内存占用小的特点，它是一个保存了很长的二级制向量，同时结合 Hash 函数实现的。而高效插入和查询的代价就是，它是一个基于概率的数据结构，<strong>只能告诉我们一个元素绝对不在集合内，对于存在集合内的元素有一定的误判率</strong>。</p>\n<p>布隆过滤器中总是会存在误判率，因为哈希碰撞是不可能百分百避免的。布隆过滤器对这种误判率称之为「<strong>假阳性概率</strong>」，即：<strong>False Positive Probability</strong>，简称为 fpp。在实践中使用布隆过滤器时可以自己定义一个 fpp，然后就可以根据布隆过滤器的理论计算出需要多少个哈希函数和多大的位数组空间。需要注意的是这个 fpp 不能定义为 100%，因为无法百分保证不发生哈希碰撞。</p>\n<p>下图表示向布隆过滤器中添加元素 <code>www.123.com</code> 和 <code>www.456.com</code> 的过程，它使用了 func1 和 func2 两个简单的哈希函数。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240820113041030.png\" alt=\"image-20240820113041030\"></p>\n<p>其基本原理如下：</p>\n<ol>\n<li><strong>初始化</strong>：当我们创建一个布隆过滤器时，我们首先创建一个全由0组成的位数组（bit array)。同时，我们还需选择几个独立的哈希函数，每个函数都可以将集合中的元素映射到这个位数组的某个位置。</li>\n<li><strong>添加元素</strong>：在布隆过滤器中添加一个元素时，我们会将此元素通过所有的哈希函数进行映射，得到在位数组中的几个位置，然后将这些位置标记为1。</li>\n<li><strong>查询元素</strong>：如果我们要检查一个元素是否在集合中，我们同样使用这些哈希函数将元素映射到位数组中的几个位置，<strong>如果所有的位置都被标记为1，那么我们就可以说该元素可能在集合中。如果有任何一个位置不为1，那么该元素肯定不在集合中</strong>。</li>\n</ol>\n<p>通过其原理可以知道，我们可以提高数组长度以及 hash 计算次数来降低误报率，但是相应的 CPU、内存的消耗也会相应地提高，会增加存储和计算的开销。因此，布隆过滤器的使用需要在误判率和性能之间进行权衡。布隆过滤器有以下两个特点：</p>\n<ul>\n<li><strong>只要返回数据不存在，则肯定不存在。</strong></li>\n<li><strong>返回数据存在，不一定存在</strong>。</li>\n</ul>\n<p>布隆过滤器的误判率主要来源于「<strong>哈希碰撞</strong>」。因为位数组的大小有限，不同的元素可能会被哈希到相同的位置，导致即使某个元素并未真正被加入过滤器，也可能因为其他已经存在的元素而让所有哈希函数映射的位都变为了1，从而误判为存在。这就是布隆过滤器的“假阳性”错误。在有限的数组长度中存放大量的数据，即便是再完美的 Hash 算法也会有冲突，所以有可能两个完全不同的 A、B 两个数据最后定位到的位置是一模一样的。这时拿 B 进行查询时那自然就是误报了。</p>\n<p>**布隆过滤器的时间复杂度和空间复杂度：**对于一个 m（比特位个数）和 k（哈希函数个数）值确定的布隆过滤器，添加和判断操作的时间复杂度都是 O(k)，这意味着每次你想要插入一个元素或者查询一个元素是否在集合中，只需要使用 k 个哈希函数对该元素求值，然后将对应的比特位标记或者检查对应的比特位即可。</p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"# 排序算法\"></a><a href=\"#%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\">#</a> 排序算法</h2><h3 id=\"说几个你懂的排序算法，并说明其时间空间复杂度\"><a href=\"#说几个你懂的排序算法，并说明其时间空间复杂度\" class=\"headerlink\" title=\"# 说几个你懂的排序算法，并说明其时间空间复杂度\"></a><a href=\"#%E8%AF%B4%E5%87%A0%E4%B8%AA%E4%BD%A0%E6%87%82%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%B9%B6%E8%AF%B4%E6%98%8E%E5%85%B6%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">#</a> 说几个你懂的排序算法，并说明其时间空间复杂度</h3><p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233717608.png\" alt=\"image-20240725233717608\"></p>\n<ul>\n<li><strong>冒泡排序</strong>：通过相邻元素的比较和交换，每次将最大（或最小）的元素逐步“冒泡”到最后（或最前）。时间复杂度：最好情况下O(n)，最坏情况下O(n^2)，平均情况下O(n^2)。，空间复杂度：O(1)。</li>\n<li><strong>插入排序</strong>：将待排序元素逐个插入到已排序序列的合适位置，形成有序序列。时间复杂度：最好情况下O(n)，最坏情况下O(n^2)，平均情况下O(n^2)，空间复杂度：O(1)。</li>\n<li><strong>选择排序</strong>（Selection Sort）：通过不断选择未排序部分的最小（或最大）元素，并将其放置在已排序部分的末尾（或开头）。时间复杂度：最好情况下O(n^2)，最坏情况下O(n^2)，平均情况下O(n^2)，空间复杂度：O(1)。</li>\n<li><strong>快速排序</strong>（Quick Sort）：通过选择一个基准元素，将数组划分为两个子数组，使得左子数组的元素都小于（或等于）基准元素，右子数组的元素都大于（或等于）基准元素，然后对子数组进行递归排序。时间复杂度：最好情况下O(nlogn)，最坏情况下O(n^2)，平均情况下O(nlogn)，空间复杂度：最好情况下O(logn)，最坏情况下O(n)。</li>\n<li><strong>归并排序</strong>（Merge Sort）：将数组不断分割为更小的子数组，然后将子数组进行合并，合并过程中进行排序。时间复杂度：最好情况下O(nlogn)，最坏情况下O(nlogn)，平均情况下O(nlogn)。空间复杂度：O(n)。</li>\n<li><strong>堆排序</strong>（Heap Sort）：通过将待排序元素构建成一个最大堆（或最小堆），然后将堆顶元素与末尾元素交*换，再重新调整堆，重复该过程直到排序完成。时间复杂度：最好情况下O(nlogn)，最坏情况下O(nlogn)，平均情况下O(nlogn)。空间复杂度：O(1)。</li>\n</ul>\n<h3 id=\"讲一下冒泡排序算法\"><a href=\"#讲一下冒泡排序算法\" class=\"headerlink\" title=\"# 讲一下冒泡排序算法\"></a><a href=\"#%E8%AE%B2%E4%B8%80%E4%B8%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\">#</a> 讲一下冒泡排序算法</h3><p>冒泡排序：通过相邻元素的比较和交换，每次将最大（或最小）的元素逐步“冒泡”到最后（或最前）</p>\n<ul>\n<li>冒泡排序的最好时间复杂度出现在以下情况：当待排序数组已经有序时，即每个元素都比其前面的元素小，那么在第一次遍历数组时就可以确定排序已经完成，因此时间复杂度为O(n)。</li>\n<li>冒泡排序的时间复杂度为O(n^2)。因为在排序过程中，需要进行多次遍历和元素交换，而每次遍历都需要比较相邻的元素并决定是否进行交换，这种操作需要花费O(n)的时间。因此，冒泡排序的时间复杂度通常为O(n^2)。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 冒泡排序算法</span></span><br><span class=\"line\">    public <span class=\"type\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 外层循环控制比较轮数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 内层循环进行两两比较并交换</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 交换两个元素</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">64</span>, <span class=\"number\">34</span>, <span class=\"number\">25</span>, <span class=\"number\">12</span>, <span class=\"number\">22</span>, <span class=\"number\">11</span>, <span class=\"number\">90</span>&#125;;</span><br><span class=\"line\">        BubbleSort bubbleSort = new BubbleSort();</span><br><span class=\"line\">        bubbleSort.bubbleSort(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Sorted array:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : arr) &#123;</span><br><span class=\"line\">            System.out.print(value + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"讲一下快排原理\"><a href=\"#讲一下快排原理\" class=\"headerlink\" title=\"# 讲一下快排原理\"></a><a href=\"#%E8%AE%B2%E4%B8%80%E4%B8%8B%E5%BF%AB%E6%8E%92%E5%8E%9F%E7%90%86\">#</a> 讲一下快排原理</h3><p>快排使用了分治策略的思想，所谓分治，顾名思义，就是分而治之，将一个复杂的问题，分成两个或多个相似的子问题，在把子问题分成更小的子问题，直到更小的子问题可以简单求解，求解子问题，则原问题的解则为子问题解的合并。</p>\n<p>快排的过程简单的说只有三步：</p>\n<ul>\n<li>首先从序列中选取一个数作为基准数</li>\n<li>将比这个数大的数全部放到它的右边，把小于或者等于它的数全部放到它的左边 （一次快排 <code>partition</code>）</li>\n<li>然后分别对基准的左右两边重复以上的操作，直到数组完全排序</li>\n</ul>\n<p>具体按以下步骤实现：</p>\n<ul>\n<li>1，创建两个指针分别指向数组的最左端以及最右端</li>\n<li>2，在数组中任意取出一个元素作为基准</li>\n<li>3，左指针开始向右移动，遇到比基准大的停止</li>\n<li>4，右指针开始向左移动，遇到比基准小的元素停止，交换左右指针所指向的元素</li>\n<li>5，重复3，4，直到左指针超过右指针，此时，比基准小的值就都会放在基准的左边，比基准大的值会出现在基准的右边</li>\n<li>6，然后分别对基准的左右两边重复以上的操作，直到数组完全排序</li>\n</ul>\n<p>注意这里的基准该如何选择？最简单的一种做法是每次都是选择最左边的元素作为基准，但这对几乎已经有序的序列来说，并不是最好的选择，它将会导致算法的最坏表现。还有一种做法，就是选择中间的数或通过 <code>Math.random()</code> 来随机选取一个数作为基准。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/640.gif\" alt=\"图片\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 快速排序算法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> partition(arr, low, high);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 递归排序左半部分</span></span><br><span class=\"line\">            quickSort(arr, low, pi - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 递归排序右半部分</span></span><br><span class=\"line\">            quickSort(arr, pi + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 划分函数，用于找到基准元素的正确位置</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> arr[high]; <span class=\"comment\">// 选择最后一个元素作为基准</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> low - <span class=\"number\">1</span>; <span class=\"comment\">// 初始化较小元素的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> low; j &lt; high; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                <span class=\"comment\">// 交换元素</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">                arr[i] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将基准元素放到正确的位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[i + <span class=\"number\">1</span>] = arr[high];</span><br><span class=\"line\">        arr[high] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>; <span class=\"comment\">// 返回基准元素的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">10</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">QuickSort</span> <span class=\"variable\">quickSort</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QuickSort</span>();</span><br><span class=\"line\">        quickSort.quickSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Sorted array:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : arr) &#123;</span><br><span class=\"line\">            System.out.print(value + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"堆排序算法原理，稳定吗？\"><a href=\"#堆排序算法原理，稳定吗？\" class=\"headerlink\" title=\"# 堆排序算法原理，稳定吗？\"></a><a href=\"#%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86-%E7%A8%B3%E5%AE%9A%E5%90%97\">#</a> 堆排序算法原理，稳定吗？</h3><p>如果每个节点大于等于子树中的每个节点，我们称之为大顶堆，小于等于子树中的每个节点，我们则称之为小顶堆。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1719984315347-b887765d-bf9d-4781-9951-a9fc1e10490c.png\" alt=\"img\"></p>\n<p>堆的要求：</p>\n<ul>\n<li>必须是完全二叉树</li>\n<li>堆中的每一个节点，都必须大于等于（或小于等于）其子树中每个节点的值。</li>\n</ul>\n<p>堆通常是使用一维数组进行保存，节省空间，不需要存左右子节点的指针，通过下标就可定位左右节点和父节点。在起始位置为0的数组中：</p>\n<ul>\n<li>父节点 i 的左子节点在(2i+1)的位置</li>\n<li>父节点 i 的右子节点在(2i+2)的位置</li>\n<li>子节点 i 的父节点在(i-1)&#x2F;2向下取整的位置</li>\n</ul>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/1719985997397-ca423f41-4362-4a18-8611-91b8112d096c.png\" alt=\"img\"></p>\n<p>我们可以把堆排序的过程大致分为两大步骤，分别是建堆和排序。</p>\n<ul>\n<li>建堆：建堆操作就是将一个无序的数组转化为最大堆的操作，首先将数组原地建一个堆。“原地”的含义就是不借助另一个数组，就在原数组上操作。我们的实现思路是从后往前处理数据，并且每个数据都是从上向下调整。</li>\n<li>排序：建堆结束后，数组中的数据已经按照大顶堆的特性进行组织了，数组中的第一个元素就是堆顶，也就是最大的元素。我们把它和最后一个元素交换，那最大的元素就放到了下标为n的位置，时末尾元素就是最大值，将剩余元素重新堆化成一个大顶堆。继续重复这些步骤，直至数组有序排列</li>\n</ul>\n<p>假设我们有一个数组 [4, 10, 3, 5, 1]，堆排序的过程如下：</p>\n<ol>\n<li>构建最大堆：[10, 5, 3, 4, 1]</li>\n<li>交换堆顶元素与最后一个元素：[1, 5, 3, 4, 10]</li>\n<li>调整剩余元素为堆：[5, 4, 3, 1]</li>\n<li>再次交换堆顶元素与最后一个元素：[1, 4, 3, 5]</li>\n<li>调整剩余元素为堆：[4, 3, 1]</li>\n<li>继续上述过程直到排序完成：[1, 3, 4, 5, 10]</li>\n</ol>\n<p>算法实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 堆排序方法</span></span><br><span class=\"line\">    public <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">heapSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 构建堆（重新排列数组）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            heapify(arr, n, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 依次从堆中提取元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前根节点移动到末尾</span></span><br><span class=\"line\">            <span class=\"type\">int</span> temp = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">            arr[<span class=\"number\">0</span>] = arr[i];</span><br><span class=\"line\">            arr[i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 在堆中调整</span></span><br><span class=\"line\">            heapify(arr, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过索引i对数组arr的前n个元素进行堆调整</span></span><br><span class=\"line\">    private <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">heapify</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> largest = i; <span class=\"comment\">// 初始化最大值索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>; <span class=\"comment\">// 左孩子节点</span></span><br><span class=\"line\">        <span class=\"type\">int</span> right = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>; <span class=\"comment\">// 右孩子节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果左孩子大于根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果右孩子大于当前最大值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果最大值不是根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (largest != i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> swap = arr[i];</span><br><span class=\"line\">            arr[i] = arr[largest];</span><br><span class=\"line\">            arr[largest] = swap;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 递归调整受影响的子树</span></span><br><span class=\"line\">            heapify(arr, n, largest);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        heapSort(arr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后的数组:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们来分析一下堆排序的时间复杂度、空间复杂度以及稳定性。</p>\n<ul>\n<li><p>整个堆排序的过程中，只需要个别的临时存储空间，所以<strong>堆排序是原地排序算法</strong>。</p>\n</li>\n<li><p>堆排序包括建堆和排序两个操作，建堆的时间复杂度是O(n)，排序过程时间复杂度是O(nlogN)。所以，**堆排序的整个时间复杂度是O(nlogN)**。</p>\n</li>\n<li><p>因为在排序的过程中，存在将堆的最后一个节点跟堆顶互换的操作，所以有可能会改变值相同数据的原始相对顺序，所以<strong>堆排序不是稳定的排序算法</strong>。例如，假设我们有两个相同的元素A和B，且A在B前面。在构建和调整堆的过程中，B可能被移动到A的前面，从而破坏了它们原来的相对顺序。</p>\n</li>\n</ul>\n<h3 id=\"归并排序和快速排序的使用场景\"><a href=\"#归并排序和快速排序的使用场景\" class=\"headerlink\" title=\"# 归并排序和快速排序的使用场景\"></a><a href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\">#</a> <strong>归并排序和快速排序的使用场景</strong></h3><ul>\n<li>归并排序是稳定排序算法，适合排序稳定的场景；</li>\n<li>快速排序是不稳定排序算法，不适合排序稳定的场景，快速排序是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</li>\n</ul>\n<h3 id=\"什么是排序稳定性？\"><a href=\"#什么是排序稳定性？\" class=\"headerlink\" title=\"# 什么是排序稳定性？\"></a><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%92%E5%BA%8F%E7%A8%B3%E5%AE%9A%E6%80%A7\">#</a> 什么是排序稳定性？</h3><p>排序算法的稳定性是指在排序过程中，当有多个具有相同关键字的元素时，这些元素在排序后的序列中保持它们原有的相对顺序。</p>\n<p>换句话说，如果两个元素有相同的键值，那么在排序前，如果第一个元素在第二个元素之前，排序后第一个元素也应该在第二个元素之前。</p>\n<p>具体来说，对于一个序列中的两个元素A和B，如果A和B的键值相同，且在排序前A在B之前，那么在排序后A仍然应该在B之前，算法才能被称为是稳定的。</p>\n<p>例如，考虑一个包含姓名和年龄的列表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(&quot;Alice&quot;, 25), (&quot;Bob&quot;, 25), (&quot;Charlie&quot;, 20)]</span><br></pre></td></tr></table></figure>\n\n<p>如果排序算法是稳定的，那么在按年龄排序后，”Alice”和”Bob”的相对顺序不会改变：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(&quot;Charlie&quot;, 20), (&quot;Alice&quot;, 25), (&quot;Bob&quot;, 25)]</span><br></pre></td></tr></table></figure>\n\n<p>但如果排序算法不稳定，”Alice”和”Bob”的相对顺序可能会在排序后改变：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(&quot;Charlie&quot;, 20), (&quot;Bob&quot;, 25), (&quot;Alice&quot;, 25)]</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，排序算法就被认为是不稳定的。</p>\n<h3 id=\"稳定和不稳定排序算法有什么特点？\"><a href=\"#稳定和不稳定排序算法有什么特点？\" class=\"headerlink\" title=\"# 稳定和不稳定排序算法有什么特点？\"></a><a href=\"#%E7%A8%B3%E5%AE%9A%E5%92%8C%E4%B8%8D%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9\">#</a> <strong>稳定和不稳定排序算法有什么特点？</strong></h3><p>稳定排序算法的特点：</p>\n<ul>\n<li>相同元素的相对位置不会改变，排序后仍然保持原始顺序。</li>\n<li>适用于需要保持元素间相对顺序关系的场景，如按照年龄排序后按姓名排序。</li>\n</ul>\n<p>不稳定排序算法的特点：</p>\n<ul>\n<li>相同元素的相对位置可能会改变，排序后不保证原始顺序。</li>\n<li>可能会更快，但不适用于需要保持元素间相对顺序关系的场景。</li>\n</ul>\n<h3 id=\"说说快排流程，时间复杂度\"><a href=\"#说说快排流程，时间复杂度\" class=\"headerlink\" title=\"# 说说快排流程，时间复杂度\"></a><a href=\"#%E8%AF%B4%E8%AF%B4%E5%BF%AB%E6%8E%92%E6%B5%81%E7%A8%8B-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">#</a> 说说快排流程，时间复杂度</h3><p>快速排序的流程如下：</p>\n<ul>\n<li>从数组中选择一个基准元素（通常是数组中间位置的元素）。</li>\n<li>将数组分成两部分，小于基准元素的放在左边，大于基准元素的放在右边。</li>\n<li>递归地对左右两部分进行快速排序。</li>\n</ul>\n<p>快速排序的时间复杂度为O(n log n)，其中n为数组的长度。最坏情况下时间复杂度为O(n^2)，发生在每次选择的基准元素都是最大或最小值时。平均情况下时间复杂度为O(n log n)，效率较高。</p>\n<h3 id=\"快排为什么时间复杂度最差是O（n-2）\"><a href=\"#快排为什么时间复杂度最差是O（n-2）\" class=\"headerlink\" title=\"# 快排为什么时间复杂度最差是O（n^2）\"></a><a href=\"#%E5%BF%AB%E6%8E%92%E4%B8%BA%E4%BB%80%E4%B9%88%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9C%80%E5%B7%AE%E6%98%AFo-n-2\">#</a> 快排为什么时间复杂度最差是O（n^2）</h3><p>主要是因为在每次划分时选择的基准元素不合适导致的。当每次选择的基准元素都是当前子数组中的最大或最小元素时，就会导致每次划分只能减少一个元素，而不是均匀地分成两部分，从而造成时间复杂度达到O(n^2)。</p>\n<p>这种情况通常发生在数组已经有序或基本有序的情况下。为了避免最坏情况发生，可以通过随机选择基准元素或者使用三数取中法等策略来提高快速排序的性能。</p>\n<h3 id=\"快排这么强，那冒泡排序还有必要吗？\"><a href=\"#快排这么强，那冒泡排序还有必要吗？\" class=\"headerlink\" title=\"# 快排这么强，那冒泡排序还有必要吗？\"></a><a href=\"#%E5%BF%AB%E6%8E%92%E8%BF%99%E4%B9%88%E5%BC%BA-%E9%82%A3%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E5%90%97\">#</a> 快排这么强，那冒泡排序还有必要吗？</h3><p>冒泡排序在一些特定场景下仍然有其优势，比如：</p>\n<ul>\n<li>对于小规模数据或基本有序的数据，冒泡排序可能比快速排序更简单、更直观。</li>\n<li>冒泡排序是稳定排序算法，相对于快速排序的不稳定性，在某些情况下可能更适合要求稳定性的场景。</li>\n<li>冒泡排序是原地排序算法，不需要额外的空间，适合空间复杂度要求严格的场景。</li>\n</ul>\n<h3 id=\"如果要对一个很大的数据集，进行排序，而没办法一次性在内存排序，这时候怎么办？\"><a href=\"#如果要对一个很大的数据集，进行排序，而没办法一次性在内存排序，这时候怎么办？\" class=\"headerlink\" title=\"# 如果要对一个很大的数据集，进行排序，而没办法一次性在内存排序，这时候怎么办？\"></a><a href=\"#%E5%A6%82%E6%9E%9C%E8%A6%81%E5%AF%B9%E4%B8%80%E4%B8%AA%E5%BE%88%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86-%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F-%E8%80%8C%E6%B2%A1%E5%8A%9E%E6%B3%95%E4%B8%80%E6%AC%A1%E6%80%A7%E5%9C%A8%E5%86%85%E5%AD%98%E6%8E%92%E5%BA%8F-%E8%BF%99%E6%97%B6%E5%80%99%E6%80%8E%E4%B9%88%E5%8A%9E\">#</a> 如果要对一个很大的数据集，进行排序，而没办法一次性在内存排序，这时候怎么办？</h3><p>可以使用外部排序来解决，基本思路分为两个阶段。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>部分排序阶段。</p></blockquote>\n<p>我们根据内存大小，将待排序的文件拆成多个部分，使得每个部分都是足以存入内存中的。然后选择合适的内排序算法，将多个文件部分排序，并输出到容量可以更大的外存临时文件中，每个临时文件都是有序排列的，我们将其称之为一个“顺段”。</p>\n<p>在第一个阶段部分排序中，由于内存可以装下每个顺段的所有元素，可以使用<strong>快速排序</strong>，时间复杂度是O(nlogn)。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>归并阶段</p></blockquote>\n<p>我们对前面的多个“顺段”进行合并，思想和归并排序其实是一样的。以 2 路归并为例，每次都将两个连续的顺段合并成一个更大的顺段。</p>\n<p>因为内存限制，每次可能只能读入两个顺段的部分内容，所以我们需要一部分一部分读入，在内存里将可以确定顺序的部分排列，并输出到外存里的文件中，不断重复这个过程，直至两个顺段被完整遍历。这样经过多层的归并之后，最终会得到一个完整的顺序文件。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233745307.png\" alt=\"image-20240725233745307\"></p>\n<p>归并阶段有个非常大的时间消耗就是 IO，也就是输入输出。最好就是让归并的层数越低越好，为了降低降低归并层数，可以使用<strong>败者树</strong>。</p>\n<p>败者树中的非终端结点中存储的是胜利（左右孩子相比较，谁最小即为胜者）的一方；而败者树中的非终端结点存储的是失败的一方。而在比较过程中，都是拿胜者去比较。</p>\n<p><img src=\"https://cdn.xiaolincoding.com//picgo/image-20240725233754449.png\" alt=\"image-20240725233754449\"></p>\n<p>现在有了败者树的加持，多路归并排序就可以比较高效地解决外部排序的问题了。</p>\n<p>大致思路就是：</p>\n<ul>\n<li>先用内排序算法（比如快速排序），尽可能多的加载源文件，将其变成 n 个有序顺段。</li>\n<li>在内存有限的前提下每 k 个文件为一组，每次流式地从各个文件中读取一个单词，借助败者树选出字典序最低的一个，输出到文件中，这样就可以将 k 个顺段合并到一个顺段中了；反复执行这样的操作，直至所有顺段被归并到同一个顺段。</li>\n</ul>\n<hr>\n","feature":true,"text":"# 数据结构与算法# 数据结构# 了解哪些数据结构？ 数组：数组的内存空间是连续的，随机访问的时间复杂度是O1，适用于需要按索引访问元素的场景，但是插入和删除元...","permalink":"/post/数据结构与算法","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":1,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":1,"path":"api/tags/数据结构与算法.json"},{"name":"精选","slug":"精选","count":10,"path":"api/tags/精选.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> 数据结构与算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\"> 数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9F\"><span class=\"toc-text\"> 了解哪些数据结构？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\"> 数组和链表区别是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%95%B0%E7%BB%84%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BAO-1-%EF%BC%9F\"><span class=\"toc-text\"> 为什么数组查询的复杂度为O(1)？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E4%B8%80%E4%B8%8B%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\"> 说一下队列和栈的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%EF%BC%9F\"><span class=\"toc-text\"> 如何使用两个栈实现队列？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\"> 平衡二叉树结构是怎么样的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%B4%E4%B8%80%E4%B8%8B%EF%BC%8C%E8%B7%B3%E8%A1%A8%E8%AF%B4%E4%B8%80%E4%B8%8B%EF%BC%9F\"><span class=\"toc-text\"> 红黑树说一下，跳表说一下？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%A0%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88%E5%9C%B0%E6%96%B9%E7%94%A8%E4%BA%86%E7%BA%A2%E9%BB%91%E6%A0%91%E5%92%8C%E8%B7%B3%E8%A1%A8%E5%90%97%EF%BC%9F\"><span class=\"toc-text\"> 你知道什么地方用了红黑树和跳表吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%9F\"><span class=\"toc-text\"> 跳表时间复杂度？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%EF%BC%9F\"><span class=\"toc-text\"> 红黑树的数据结构介绍一下？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E6%90%9C%E7%B4%A2%E6%9C%80%E5%9D%8F%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%BF%99%E6%A0%B7%EF%BC%9F%E4%BB%A5%E5%8F%8A%E7%94%A8%E4%BB%80%E4%B9%88%E7%BB%93%E6%9E%9C%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\"> 二叉树搜索最坏的时间复杂度，为什么会这样？以及用什么结果解决？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#B-%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\"> B+树的特点是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#B-%E6%A0%91%E5%92%8CB%E6%A0%91%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E4%B8%80%E6%A0%B7%EF%BC%8CB-%E6%A0%91%E7%9A%84%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E5%92%8C%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E4%B8%80%E6%A0%B7%EF%BC%8C%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E4%BC%9A%E4%B8%8D%E4%BC%9A%E5%AD%98%E6%95%B0%E6%8D%AE%EF%BC%9F\"><span class=\"toc-text\"> B+树和B树有什么不一样，B+树的叶子节点和非叶子节点有什么不一样，非叶子节点会不会存数据？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\"> 堆是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LRU%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F\"><span class=\"toc-text\"> LRU是什么？如何实现？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%EF%BC%9F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%9F\"><span class=\"toc-text\"> 布隆过滤器怎么设计？时间复杂度？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> 排序算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E5%87%A0%E4%B8%AA%E4%BD%A0%E6%87%82%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%8C%E5%B9%B6%E8%AF%B4%E6%98%8E%E5%85%B6%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\"> 说几个你懂的排序算法，并说明其时间空间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%B2%E4%B8%80%E4%B8%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> 讲一下冒泡排序算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%B2%E4%B8%80%E4%B8%8B%E5%BF%AB%E6%8E%92%E5%8E%9F%E7%90%86\"><span class=\"toc-text\"> 讲一下快排原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%8C%E7%A8%B3%E5%AE%9A%E5%90%97%EF%BC%9F\"><span class=\"toc-text\"> 堆排序算法原理，稳定吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\"> 归并排序和快速排序的使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%92%E5%BA%8F%E7%A8%B3%E5%AE%9A%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\"> 什么是排序稳定性？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%B3%E5%AE%9A%E5%92%8C%E4%B8%8D%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\"> 稳定和不稳定排序算法有什么特点？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E8%AF%B4%E5%BF%AB%E6%8E%92%E6%B5%81%E7%A8%8B%EF%BC%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\"> 说说快排流程，时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E6%8E%92%E4%B8%BA%E4%BB%80%E4%B9%88%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9C%80%E5%B7%AE%E6%98%AFO%EF%BC%88n-2%EF%BC%89\"><span class=\"toc-text\"> 快排为什么时间复杂度最差是O（n^2）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E6%8E%92%E8%BF%99%E4%B9%88%E5%BC%BA%EF%BC%8C%E9%82%A3%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E5%90%97%EF%BC%9F\"><span class=\"toc-text\"> 快排这么强，那冒泡排序还有必要吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E8%A6%81%E5%AF%B9%E4%B8%80%E4%B8%AA%E5%BE%88%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%EF%BC%8C%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%EF%BC%8C%E8%80%8C%E6%B2%A1%E5%8A%9E%E6%B3%95%E4%B8%80%E6%AC%A1%E6%80%A7%E5%9C%A8%E5%86%85%E5%AD%98%E6%8E%92%E5%BA%8F%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F\"><span class=\"toc-text\"> 如果要对一个很大的数据集，进行排序，而没办法一次性在内存排序，这时候怎么办？</span></a></li></ol></li></ol>","author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"操作系统","uid":"8c6c59136f9c0c8c29b87ea646eed9d1","slug":"计网/操作系统面试题","date":"2024-12-04T04:25:14.000Z","updated":"2024-12-07T10:33:23.300Z","comments":true,"path":"api/articles/计网/操作系统面试题.json","keywords":null,"cover":["https://i.pinimg.com/236x/e2/01/f1/e201f1dcaf9f102cd2b37d2a3b048490.jpg"],"text":"# 操作系统# 用户态和内核态# 用户态和内核态的区别？内核态和用户态是操作系统中的两种运行模式。它们的主要区别在于权限和可执行的操作： 内核态（Kernel ...","permalink":"/post/计网/操作系统面试题","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"八股","slug":"八股","count":22,"path":"api/categories/八股.json"}],"tags":[{"name":"精选","slug":"精选","count":10,"path":"api/tags/精选.json"},{"name":"操作系统","slug":"操作系统","count":1,"path":"api/tags/操作系统.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"feature":true}}