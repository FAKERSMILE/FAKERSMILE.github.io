{"title":"计算机网络","uid":"293c17b4d2a4292133cc4d1ffd7f8725","slug":"计网/计算机网络","date":"2024-12-03T14:23:01.000Z","updated":"2024-12-03T16:35:43.375Z","comments":true,"path":"api/articles/计网/计算机网络.json","keywords":null,"cover":"https://i.pinimg.com/236x/69/25/ad/6925ad87d9fd333a079da2b53ec08834.jpg","content":"<h2 id=\"OSI模型、TCP-IP模型、五层模型-？\"><a href=\"#OSI模型、TCP-IP模型、五层模型-？\" class=\"headerlink\" title=\"OSI模型、TCP&#x2F;IP模型、五层模型 ？\"></a><a href=\"#osi%E6%A8%A1%E5%9E%8B%E3%80%81tcp-ip%E6%A8%A1%E5%9E%8B%E3%80%81%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B\">OSI模型、TCP&#x2F;IP模型、五层模型 ？</a></h2><p><img src=\"https://www.kaiven666.online/images/osi.png\" alt=\"image-20241022205650940\"></p>\n<p>刚开始学习的小伙伴一定会被这些搞懵逼的，傻傻分不清哦。</p>\n<p>这个所谓的七层模型，实际上那帮搞学术的弄出来的，但是很可惜，并没有流行开了，主要原因就是搭建这样的体系架构网络很复杂。（了解一下就行了）</p>\n<p><strong>TCP&#x2F;IP网络模型是目前最流行的网络协议模型</strong>。在我们的实际生活中被广泛的使用。</p>\n<p>最后这个五层协议，主要是为了教学需要而设计的，了解一下即可，但是我还是会简单介绍的。</p>\n<h2 id=\"TCP-IP模型每一层的作用？\"><a href=\"#TCP-IP模型每一层的作用？\" class=\"headerlink\" title=\"TCP&#x2F;IP模型每一层的作用？\"></a><a href=\"#tcp-ip%E6%A8%A1%E5%9E%8B%E6%AF%8F%E4%B8%80%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8\">TCP&#x2F;IP模型每一层的作用？</a></h2><ul>\n<li><p><strong>应用层</strong></p>\n<p>这是我们大部分开发最为熟悉的一层，应用层对于我们来说，是相对可控的，因为<strong>传输层及以下是操作系统的网络协议栈接管</strong>，用户态的我怎么敢触碰内核态的你。</p>\n<p>你所熟知的各种协议，比如 HTTP、HTTPS、DNS等，都属于应用层协议。</p>\n</li>\n<li><p><strong>传输层</strong></p>\n<p>这一层的协议就少了，就两个：<strong>TCP和UDP</strong></p>\n<p>之后的文章会做详细的讲解，这里简单说一下两个协议的特点。</p>\n<p><strong>TCP提供面向连接的、可靠的传输服务；UDP提供无连接、尽最大努力交付的传输服务</strong>。</p>\n</li>\n<li><p><strong>网络层</strong></p>\n<p>IP协议起了至关重要的作用，想一下，现在的网络体系，离得开IP嘛？</p>\n</li>\n<li><p><strong>网络接口层</strong></p>\n<p>对于上层的协议来说，这一层就是数据的发送层，实际上，并不是，后面会说。</p>\n</li>\n</ul>\n<h6 id=\"数据发送的大致流程？\"><a href=\"#数据发送的大致流程？\" class=\"headerlink\" title=\"数据发送的大致流程？\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E5%8F%91%E9%80%81%E7%9A%84%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B\">数据发送的大致流程？</a></h6><p><img src=\"https://www.kaiven666.online/images/network01.png\" alt=\"image-20241022211934295\"></p>\n<p>应用层将需要发送的数据交给传输层，传输层拿到后加上TCP头部，向下交给网络层，网络层又加上IP头部，交给网络接口层，加上帧头和帧尾，然后发出去。</p>\n<p>（上层协议委托的数据对于下层协议来说是透明的，比如说对于网络层来说，它是不知道有TCP头部和应用数据之分的，只会认为是一个整体）</p>\n<h2 id=\"网络接口层简介\"><a href=\"#网络接口层简介\" class=\"headerlink\" title=\"网络接口层简介\"></a><a href=\"#%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82%E7%AE%80%E4%BB%8B\">网络接口层简介</a></h2><p>物理层没有什么好说的，这里主要说一下数据链路层。</p>\n<p>数据链路层的协议很多，但是他们都面临着三个问题：<strong>封装成帧、透明传输和差错检测</strong></p>\n<ul>\n<li><p><strong>封装成帧</strong></p>\n<p>数据链路层会将网络层交付的数据添加首部和尾部，这就封装成了一个帧，<strong>首部和尾部就标识了该帧的开始与结束</strong>。</p>\n<p><strong>帧长 &#x3D; 首部长度 + 数据段长度 + 尾部长度</strong>。</p>\n<p><strong>MTU（最大传输单元） —— 数据部分长度限制，看图：</strong></p>\n<p><img src=\"https://picx.zhimg.com/v2-aa20a22c5815f8a4a9129d3a1c3a2c53_720w.jpg?source=172ae18b\"></p>\n<p><strong>帧定界符：就是表示一个帧的开始与结束的标志。</strong>=&gt; 有个场景，如果发送端发送的时候，突然“掉线”了，那么接收端就永远不会收到<strong>帧结束符</strong>。等到<strong>下一个帧的帧开始</strong>符到达时，接收端就知道上一个帧不完整了，就会把它丢弃。</p>\n<p><img src=\"https://www.kaiven666.online/images/soh.png\" alt=\"image-20241022211934295\"></p>\n</li>\n<li><p><strong>透明传输</strong></p>\n<p>这个问题与数据链路层的机制有关系。数据链路层奉行一种“<strong>来者不拒</strong>”的理念，“只要给我的，我都要”，<strong>对于帧的隔离，识别比特流中的定界符就好了</strong>。也就是说，数据链路层并不知道你传的内容是些什么玩意儿，它只负责去“截断”（找到帧开始符合帧结束符）。所以，什么样的比特组合都能通过该层。对于这些比特流而言，数据链路层就好像不存在一样。</p>\n<p>但是这样会引发一个什么样的问题呢？对于文本数据还好说，里面的内容都是键盘上录入进去的，帧开始符和帧结束符找两个用户录入不进去的字符就好了。可是，如果是一些音视频或者其他的比特流，<strong>很难保证里面其中一个字节的比特组合不会与帧开始符和帧结束符不同</strong>（毕竟对于数据链路层来说，它唯一能做的就是扫描字节，找到帧定界符）。</p>\n<p>如果数据段中出现了“帧开始”符，那么前面的数据就会被丢弃；如果数据段中出现了“帧结束符”，那么后面的数据就会被丢弃。</p>\n<p>为了解决该问题，发送端在数据链路层封装成帧的时候，如果数据内容里面出现了帧定界符，那么就在对应的字节前面添加一个转义字符，如果转义字符也重复了，那么就再添加一个转移字符。&#x3D;&gt; 该过程称作<strong>字节填充</strong>或者<strong>字节填充</strong>。</p>\n<p><img src=\"https://www.kaiven666.online/images/soh.png\" alt=\"image-20241022211934295\"></p>\n</li>\n<li><p><strong>差错检测</strong></p>\n<p><strong>比特差错</strong> &#x3D;&gt; 世界上没有完美无暇的东西，总会出问题的。数据在传输的过程中，可能会出现0变成1，或者1变成0的情况。</p>\n<p>泼出去的水无法改变，那就只能在收到的时候，利用各种手段去检测数据是否完整了。</p>\n<p>在数据链路层，广泛采用<strong>循环冗余检验CRC检错技术</strong> &#x3D;&gt; 其实就是数据段后添加一个<strong>冗余码（帧检验序列FCS）</strong> &#x3D;&gt; 发送端根据一定的算法生成，接收端根据一定的算法检测（别问，问就是了解就行了，难道我还要把算法的逻辑说出来嘛，呜呜呜）。</p>\n<p>值得一提的是，<strong>FCS的生成和CRC的运用，都是在硬件层面进行的</strong>，非常之快。</p>\n<p><strong>数据链路层只能以一种无限接近1的概率向上抛出帧，保障帧无差错</strong>。</p>\n<p>但是依然会出现这三个问题：<strong>帧丢失、帧失序、帧重复</strong> &#x3D;&gt; <strong>不能提供可靠的传输服务</strong></p>\n</li>\n</ul>\n<h4 id=\"关于MAC地址\"><a href=\"#关于MAC地址\" class=\"headerlink\" title=\"关于MAC地址\"></a><a href=\"#%E5%85%B3%E4%BA%8Emac%E5%9C%B0%E5%9D%80\">关于MAC地址</a></h4><p>相信大家都听过一个词，叫做“MAC地址”，到底是一个什么东西呢？ 它就是一个硬件地址，网卡（或者说网络适配器）厂商在生产的时候，<strong>写死在硬件里面的，全球唯一的</strong>。 网络适配器有<strong>过滤功能</strong>。每收到一个MAC帧，先用硬件检测一下MAC帧中的硬件地址，看一下是不是发往本站的。是，则收下；不是，则丢弃。 （所以，MAC地址也叫做硬件地址）</p>\n<hr>\n","text":"OSI模型、TCP/IP模型、五层模型 ？ 刚开始学习的小伙伴一定会被这些搞懵逼的，傻傻分不清哦。 这个所谓的七层模型，实际上那帮搞学术的弄出来的，但是很可惜，...","permalink":"/post/计网/计算机网络","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":1,"path":"api/tags/计算机网络.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OSI%E6%A8%A1%E5%9E%8B%E3%80%81TCP-IP%E6%A8%A1%E5%9E%8B%E3%80%81%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B-%EF%BC%9F\"><span class=\"toc-text\">OSI模型、TCP&#x2F;IP模型、五层模型 ？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TCP-IP%E6%A8%A1%E5%9E%8B%E6%AF%8F%E4%B8%80%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">TCP&#x2F;IP模型每一层的作用？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%8F%91%E9%80%81%E7%9A%84%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">数据发送的大致流程？</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">网络接口层简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8EMAC%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">关于MAC地址</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"并发基础","uid":"f5276a6470bcf00967ce9121d16c19cd","slug":"并发/并发基础","date":"2024-12-03T14:35:07.000Z","updated":"2024-12-03T16:35:43.402Z","comments":true,"path":"api/articles/并发/并发基础.json","keywords":null,"cover":"https://i.pinimg.com/236x/c5/b6/af/c5b6afd190cee163764ed775a7dc1d20.jpg","text":"为什么需要多线程？早期的单CPU时代，CPU制作厂商沉迷于提高单个核心的计算能力。但是随着时间的推移，提高单核心的计算能力越来越困难了。于是乎，堆核心成为了快速...","permalink":"/post/并发/并发基础","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"},{"name":"并发基础","slug":"并发基础","count":1,"path":"api/tags/并发基础.json"},{"name":"并发框架","slug":"并发框架","count":7,"path":"api/tags/并发框架.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}},"next_post":{"title":"java面向对象","uid":"282ca770e6df8001dbda062738b2a12a","slug":"java基础/javamxdx","date":"2024-12-03T13:21:54.000Z","updated":"2024-12-03T16:35:43.400Z","comments":true,"path":"api/articles/java基础/javamxdx.json","keywords":null,"cover":"https://i.pinimg.com/474x/8e/83/82/8e8382853f408b9143f66f76ed479f7d.jpg","text":"Java给我的感觉就是一个有一个的类，毕竟类是其代码的基本组织单元。 对象是类实例化的结果，所以对象有时也被称为实例，从类到对象的过程称为实例化。 面向对象的三...","permalink":"/post/java基础/javamxdx","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"八股","slug":"八股","count":20,"path":"api/categories/八股.json"}],"tags":[{"name":"java","slug":"java","count":15,"path":"api/tags/java.json"}],"author":{"name":"Ivan","slug":"blog-author","avatar":"https://yslcrush.obs.cn-south-1.myhuaweicloud.com/imag/m.jpg","link":"/","description":"离婚后看淡人生","socials":{"github":"https://github.com/FAKERSMILE","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/3494374914656981/favlist"}}}}}}